{"version":3,"file":"ngx-scrollbar.mjs","sources":["../../../projects/ngx-scrollbar/src/lib/viewport/scroll-viewport.ts","../../../projects/ngx-scrollbar/src/lib/utils/common.ts","../../../projects/ngx-scrollbar/src/lib/viewport/viewport-adapter.ts","../../../projects/ngx-scrollbar/src/lib/utils/scrollbar-base.ts","../../../projects/ngx-scrollbar/src/lib/ng-scrollbar.default.ts","../../../projects/ngx-scrollbar/src/lib/ng-scrollbar.model.ts","../../../projects/ngx-scrollbar/src/lib/ng-scrollbar-core.ts","../../../projects/ngx-scrollbar/src/lib/scrollbar/scrollbar-adapter.ts","../../../projects/ngx-scrollbar/src/lib/utils/pointer-events-adapter.ts","../../../projects/ngx-scrollbar/src/lib/track/track-adapter.ts","../../../projects/ngx-scrollbar/src/lib/track/track.ts","../../../projects/ngx-scrollbar/src/lib/utils/scrollbar-manager.ts","../../../projects/ngx-scrollbar/src/lib/thumb/thumb-adapter.ts","../../../projects/ngx-scrollbar/src/lib/thumb/thumb.ts","../../../projects/ngx-scrollbar/src/lib/button/scrollbar-button.component.ts","../../../projects/ngx-scrollbar/src/lib/button/scrollbar-button.component.html","../../../projects/ngx-scrollbar/src/lib/scrollbar/scrollbar.ts","../../../projects/ngx-scrollbar/src/lib/scrollbars/scrollbars.ts","../../../projects/ngx-scrollbar/src/lib/ng-scrollbar.ts","../../../projects/ngx-scrollbar/src/lib/ng-scrollbar-ext.ts","../../../projects/ngx-scrollbar/src/lib/async-detection.ts","../../../projects/ngx-scrollbar/src/lib/sync-spacer.ts","../../../projects/ngx-scrollbar/src/lib/ng-scrollbar.module.ts","../../../projects/ngx-scrollbar/src/ngx-scrollbar.ts"],"sourcesContent":["import { Directive, inject, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[scrollViewport]'\r\n})\r\nexport class ScrollViewport {\r\n\r\n  readonly nativeElement: HTMLElement = inject(ElementRef<HTMLElement>).nativeElement;\r\n\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, tap, throttleTime } from 'rxjs';\r\n\r\nexport function preventSelection(doc: Document): MonoTypeOperatorFunction<PointerEvent> {\r\n  return tap(() => doc.onselectstart = () => false);\r\n}\r\n\r\nexport function enableSelection(doc: Document): MonoTypeOperatorFunction<PointerEvent> {\r\n  return tap(() => doc.onselectstart = null);\r\n}\r\n\r\nexport function stopPropagation(): MonoTypeOperatorFunction<PointerEvent> {\r\n  return tap((e: PointerEvent) => {\r\n    // Have to prevent default to avoid unexpected movement whe you grab object beneath scrollbar #476\r\n    // https://github.com/MurhafSousli/ngx-scrollbar/issues/476\r\n    e.preventDefault();\r\n    e.stopPropagation()\r\n  });\r\n}\r\n\r\nexport function getThrottledStream<T>(stream: Observable<T>, duration: number): Observable<T> {\r\n  return stream.pipe(\r\n    throttleTime(duration || 0, null, {\r\n      leading: false,\r\n      trailing: true\r\n    })\r\n  );\r\n}\r\n\r\nexport interface ElementDimension {\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport type ScrollbarDragging = 'x' | 'y' | 'none';\r\n\r\nexport enum ViewportClasses {\r\n  Viewport = 'ng-scroll-viewport',\r\n  Content = 'ng-scroll-content',\r\n  Spacer = 'ng-scroll-spacer'\r\n}\r\n\r\nexport interface ViewportBoundaries {\r\n  contentHeight: number;\r\n  contentWidth: number;\r\n  offsetHeight: number;\r\n  offsetWidth: number;\r\n}\r\n\r\nexport type ScrollTimelineFunc = ({ source, axis }: { source: HTMLElement, axis: 'x' | 'y' }) => void;\r\n","import { Injectable, signal, WritableSignal } from '@angular/core';\r\nimport { ViewportClasses } from '../utils/common';\r\n\r\n/**\r\n * Class representing a viewport adapter.\r\n * Provides methods and properties to interact with a viewport and its content.\r\n */\r\n@Injectable()\r\nexport class ViewportAdapter {\r\n\r\n  /**\r\n   * Viewport native element\r\n   */\r\n  nativeElement: HTMLElement;\r\n  /**\r\n   * The element that wraps the content inside the viewport,\r\n   * used to measure the content size and observe its changes.\r\n   */\r\n  contentWrapperElement: HTMLElement;\r\n\r\n  /*\r\n   * A signal that indicates when viewport adapter is initialized\r\n   */\r\n  initialized: WritableSignal<boolean> = signal(false);\r\n\r\n  /** Viewport clientHeight */\r\n  get offsetHeight(): number {\r\n    return this.nativeElement.offsetHeight;\r\n  }\r\n\r\n  /** Viewport clientWidth */\r\n  get offsetWidth(): number {\r\n    return this.nativeElement.offsetWidth;\r\n  }\r\n\r\n  /** Viewport scrollTop */\r\n  get scrollTop(): number {\r\n    return this.nativeElement.scrollTop;\r\n  }\r\n\r\n  /** Viewport scrollLeft */\r\n  get scrollLeft(): number {\r\n    return this.nativeElement.scrollLeft;\r\n  }\r\n\r\n  /** Content height */\r\n  get contentHeight(): number {\r\n    return this.contentWrapperElement.offsetHeight;\r\n  }\r\n\r\n  /** Content width */\r\n  get contentWidth(): number {\r\n    return this.contentWrapperElement.offsetWidth;\r\n  }\r\n\r\n  /** The remaining vertical scrollable distance. */\r\n  get scrollMaxX(): number {\r\n    return this.contentWidth - this.offsetWidth;\r\n  }\r\n\r\n  /** The vertical remaining scrollable distance */\r\n  get scrollMaxY(): number {\r\n    return this.contentHeight - this.offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * Initialize viewport\r\n   */\r\n  init(viewportElement: HTMLElement, contentElement: HTMLElement, spacerElement?: HTMLElement): void {\r\n    // Add viewport class\r\n    viewportElement.classList.add(ViewportClasses.Viewport);\r\n    this.nativeElement = viewportElement;\r\n\r\n    // Add content wrapper class\r\n    contentElement.classList.add(ViewportClasses.Content);\r\n\r\n    // When integrating the scrollbar with virtual scroll, the content wrapper will have fake size,\r\n    // and a spacer element will have the real size\r\n    // Therefore, if spaceElement is provided, it will be observed instead of the content wrapper\r\n    if (spacerElement) {\r\n      spacerElement.classList.add(ViewportClasses.Spacer);\r\n      this.contentWrapperElement = spacerElement;\r\n    } else {\r\n      // If spacer is not provided, set it as the content wrapper\r\n      this.contentWrapperElement = contentElement;\r\n    }\r\n    this.initialized.set(true);\r\n  }\r\n\r\n  reset(): void {\r\n    this.nativeElement = null;\r\n    this.contentWrapperElement = null;\r\n    this.initialized.set(false);\r\n  }\r\n\r\n  /**\r\n   * Scrolls the viewport vertically to the specified value.\r\n   */\r\n  scrollYTo(value: number): void {\r\n    this.nativeElement.scrollTop = value;\r\n  }\r\n\r\n  /**\r\n   * Scrolls the viewport horizontally to the specified value.\r\n   */\r\n  scrollXTo(value: number): void {\r\n    this.nativeElement.scrollLeft = value;\r\n  }\r\n}\r\n","import { InjectionToken, Signal, WritableSignal } from '@angular/core';\r\nimport { Direction } from '@angular/cdk/bidi';\r\nimport { SmoothScrollToOptions } from 'ngx-scrollbar/smooth-scroll';\r\nimport { ViewportAdapter } from '../viewport';\r\nimport { ElementDimension, ScrollbarDragging } from './common';\r\n\r\n\r\n/**\r\n * Injection token that can be used to query for a `NgScrollbar`.\r\n * Used primarily to avoid circular imports.\r\n */\r\nexport const NG_SCROLLBAR: InjectionToken<_NgScrollbar> = new InjectionToken<_NgScrollbar>('NG_SCROLLBAR');\r\n\r\nexport interface _NgScrollbar {\r\n  nativeElement: HTMLElement;\r\n  dragging: WritableSignal<ScrollbarDragging>;\r\n  direction: Signal<Direction>;\r\n  trackScrollDuration: Signal<number>;\r\n  hoverOffset: Signal<boolean>;\r\n  buttons: Signal<boolean>;\r\n  disableSensor: Signal<boolean>;\r\n  sensorThrottleTime: Signal<number>;\r\n  disableInteraction: Signal<boolean>;\r\n  isVerticallyScrollable: Signal<boolean>;\r\n  isHorizontallyScrollable: Signal<boolean>;\r\n  verticalUsed: Signal<boolean>;\r\n  horizontalUsed: Signal<boolean>;\r\n  thumbClass: Signal<string>;\r\n  trackClass: Signal<string>;\r\n  buttonClass: Signal<string>;\r\n  viewportDimension: WritableSignal<ElementDimension>;\r\n  contentDimension: WritableSignal<ElementDimension>;\r\n\r\n  get viewport(): ViewportAdapter;\r\n\r\n  scrollTo(options: SmoothScrollToOptions): Promise<void>;\r\n}\r\n","import { NgScrollbarOptions } from './ng-scrollbar.model';\r\n\r\nexport const defaultOptions: NgScrollbarOptions = {\r\n  trackClass: '',\r\n  thumbClass: '',\r\n  buttonClass: '',\r\n  orientation: 'auto',\r\n  appearance: 'native',\r\n  visibility: 'native',\r\n  position: 'native',\r\n  trackScrollDuration: 50,\r\n  sensorThrottleTime: 0,\r\n  disableSensor: false,\r\n  disableInteraction: false,\r\n  buttons: false,\r\n  hoverOffset: false\r\n};\r\n\r\n// This CDN link for a modified version of the polyfill to fix firefox bug https://github.com/MurhafSousli/ngx-scrollbar/issues/615\r\nexport const defaultScrollTimelinePolyfill: string = 'https://cdn.statically.io/gist/MurhafSousli/c852b6a672069396953f06ddd4b64620/raw/ef55db72e2abb7bc002ed79f4ad4cf408bfdb72f/scroll-timeline-lite.js';\r\n","import { InjectionToken } from '@angular/core';\r\nimport { defaultOptions, defaultScrollTimelinePolyfill } from './ng-scrollbar.default';\r\n\r\nexport type ScrollbarAppearance = 'native' | 'compact';\r\nexport type ScrollbarOrientation = 'auto' | 'vertical' | 'horizontal';\r\nexport type ScrollbarVisibility = 'native' | 'hover' | 'visible';\r\nexport type ScrollbarPosition = 'native' | 'invertY' | 'invertX' | 'invertAll';\r\n\r\nexport enum ScrollbarUpdateReason {\r\n  AfterInit = 'AfterInit',\r\n  Resized = 'ResizeObserver'\r\n}\r\n\r\nexport const NG_SCROLLBAR_OPTIONS: InjectionToken<NgScrollbarOptions> = new InjectionToken<NgScrollbarOptions>('NG_SCROLLBAR_OPTIONS', {\r\n  providedIn: 'root',\r\n  factory: () => defaultOptions\r\n});\r\n\r\nexport const NG_SCROLLBAR_POLYFILL: InjectionToken<string> = new InjectionToken<string>('NG_SCROLLBAR_POLYFILL', {\r\n  providedIn: 'root',\r\n  factory: () => defaultScrollTimelinePolyfill\r\n});\r\n\r\nexport interface NgScrollbarOptions {\r\n  /**\r\n   * Sets the scroll axis of the viewport.\r\n   * - 'auto': Scrollbars are displayed for both vertical and horizontal scrolling.\r\n   * - 'vertical': Scrollbars are displayed for vertical scrolling.\r\n   * - 'horizontal': Scrollbars are displayed for horizontal scrolling.\r\n   * Defaults to 'auto'.\r\n   */\r\n  orientation?: ScrollbarOrientation;\r\n\r\n  /**\r\n   * Determines when to show the scrollbar.\r\n   * - 'native': Scrollbar is visible when the viewport is scrollable, similar to native scrollbars.\r\n   * - 'hover': Scrollbars are hidden by default and become visible on scrolling or hovering.\r\n   * - 'visible': Scrollbars are always visible, even if the viewport is not scrollable.\r\n   * Defaults to 'native'.\r\n   */\r\n  visibility?: ScrollbarVisibility;\r\n\r\n  /**\r\n   * Sets the appearance of the scrollbar.\r\n   * - 'native': Scrollbar space is reserved within the viewport, similar to native scrollbars.\r\n   * - 'compact': Scrollbars do not reserve any space and are placed over the viewport.\r\n   * Defaults to 'native'.\r\n   */\r\n  appearance?: ScrollbarAppearance;\r\n\r\n  /**\r\n   * Sets the position of each scrollbar.\r\n   * - 'native': Uses the default position as in native scrollbars.\r\n   * - 'invertY': Inverts the vertical scrollbar position.\r\n   * - 'invertX': Inverts the horizontal scrollbar position.\r\n   * - 'invertAll': Inverts the positions of both vertical and horizontal scrollbars.\r\n   * Defaults to 'native'.\r\n   */\r\n  position?: ScrollbarPosition;\r\n  /** A class forwarded to the scrollbar track element */\r\n  trackClass?: string;\r\n  /** A class forwarded to the scrollbar thumb element */\r\n  thumbClass?: string;\r\n  /** A class forwarded to the scrollbar button element */\r\n  buttonClass?: string;\r\n  /** Scrolling speed when clicking on scrollbar rail */\r\n  trackScrollDuration?: number;\r\n  /** A flag used to enable/disable the scrollbar pointer events */\r\n  disableInteraction?: boolean;\r\n  /** Debounce interval for detecting changes via ResizeObserver */\r\n  sensorThrottleTime?: number;\r\n  /** Whether ResizeObserver is disabled */\r\n  disableSensor?: boolean;\r\n  /** Show scrollbar buttons */\r\n  buttons?: boolean;\r\n  /** A flag used to activate hover effect on the offset area around the scrollbar */\r\n  hoverOffset?: boolean;\r\n}\r\n\r\nexport function filterResizeEntries(entries: ResizeObserverEntry[], target: Element): DOMRectReadOnly {\r\n  return entries.filter((entry: ResizeObserverEntry) => entry.target === target)[0]?.contentRect;\r\n}\r\n","import {\r\n  Directive,\r\n  inject,\r\n  signal,\r\n  output,\r\n  computed,\r\n  untracked,\r\n  numberAttribute,\r\n  booleanAttribute,\r\n  afterRenderEffect,\r\n  input,\r\n  NgZone,\r\n  Signal,\r\n  ElementRef,\r\n  InputSignal,\r\n  WritableSignal,\r\n  OutputEmitterRef,\r\n  EffectCleanupRegisterFn,\r\n  InputSignalWithTransform\r\n} from '@angular/core';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { SharedResizeObserver } from '@angular/cdk/observers/private';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { combineLatest, Subscription } from 'rxjs';\r\nimport {\r\n  SmoothScrollElement,\r\n  SmoothScrollManager,\r\n  SmoothScrollToElementOptions,\r\n  SmoothScrollToOptions\r\n} from 'ngx-scrollbar/smooth-scroll';\r\nimport { Scrollbars } from './scrollbars/scrollbars';\r\nimport { _NgScrollbar, NG_SCROLLBAR } from './utils/scrollbar-base';\r\nimport { ViewportAdapter } from './viewport';\r\nimport { ElementDimension, ScrollbarDragging, getThrottledStream } from './utils/common';\r\nimport {\r\n  NG_SCROLLBAR_OPTIONS,\r\n  NgScrollbarOptions,\r\n  ScrollbarAppearance,\r\n  ScrollbarOrientation,\r\n  ScrollbarPosition,\r\n  ScrollbarUpdateReason,\r\n  ScrollbarVisibility\r\n} from './ng-scrollbar.model';\r\n\r\ninterface ViewportState {\r\n  verticalUsed: boolean,\r\n  horizontalUsed: boolean,\r\n  isVerticallyScrollable: boolean,\r\n  isHorizontallyScrollable: boolean,\r\n}\r\n\r\n@Directive({\r\n  host: {\r\n    '[class.ng-scrollbar]': 'true',\r\n    '[attr.verticalUsed]': 'verticalUsed()',\r\n    '[attr.horizontalUsed]': 'horizontalUsed()',\r\n    '[attr.isVerticallyScrollable]': 'isVerticallyScrollable()',\r\n    '[attr.isHorizontallyScrollable]': 'isHorizontallyScrollable()',\r\n    '[attr.mobile]': 'isMobile',\r\n    '[attr.dir]': 'direction()',\r\n    '[attr.position]': 'position()',\r\n    '[attr.dragging]': 'dragging()',\r\n    '[attr.appearance]': 'appearance()',\r\n    '[attr.visibility]': 'visibility()',\r\n    '[attr.orientation]': 'orientation()',\r\n    '[attr.disableInteraction]': 'disableInteraction()',\r\n    '[style.--content-height]': 'contentDimension().height',\r\n    '[style.--content-width]': 'contentDimension().width',\r\n    '[style.--viewport-height]': 'viewportDimension().height',\r\n    '[style.--viewport-width]': 'viewportDimension().width'\r\n  },\r\n  providers: [\r\n    { provide: NG_SCROLLBAR, useExisting: NgScrollbarCore }\r\n  ]\r\n})\r\nexport abstract class NgScrollbarCore implements _NgScrollbar {\r\n\r\n  /** Global options */\r\n  private readonly options: NgScrollbarOptions = inject(NG_SCROLLBAR_OPTIONS);\r\n\r\n  private readonly sharedResizeObserver: SharedResizeObserver = inject(SharedResizeObserver);\r\n\r\n  private readonly zone: NgZone = inject(NgZone);\r\n\r\n  private readonly platform: Platform = inject(Platform);\r\n\r\n  /** A flag that indicates if the platform is mobile */\r\n  readonly isMobile: boolean = this.platform.IOS || this.platform.ANDROID;\r\n\r\n  readonly dir: Directionality = inject(Directionality);\r\n\r\n  readonly smoothScroll: SmoothScrollManager = inject(SmoothScrollManager);\r\n\r\n  /** Viewport adapter instance */\r\n  readonly viewport: ViewportAdapter = inject(ViewportAdapter, { self: true });\r\n\r\n  readonly nativeElement: HTMLElement = inject(ElementRef<HTMLElement>).nativeElement;\r\n\r\n  /**\r\n   * Indicates if the direction is 'ltr' or 'rtl'\r\n   */\r\n  direction: Signal<Direction> = toSignal<Direction, Direction>(this.dir.change, { initialValue: this.dir.value });\r\n\r\n  /**\r\n   * Indicates when scrollbar thumb is being dragged\r\n   */\r\n  dragging: WritableSignal<ScrollbarDragging> = signal('none');\r\n\r\n  /**\r\n   * Sets the supported scroll track of the viewport, there are 3 options:\r\n   *\r\n   * - `vertical` Use both vertical and horizontal scrollbar\r\n   * - `horizontal` Use both vertical and horizontal scrollbar\r\n   * - `auto` Use both vertical and horizontal scrollbar\r\n   */\r\n  orientation: InputSignal<ScrollbarOrientation> = input<ScrollbarOrientation>(this.options.orientation);\r\n\r\n  /**\r\n   * When to show the scrollbar, and there are 3 options:\r\n   *\r\n   * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar\r\n   * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering\r\n   * - `always` Scrollbars are always shown even if the viewport is not scrollable\r\n   */\r\n  visibility: InputSignal<ScrollbarVisibility> = input<ScrollbarVisibility>(this.options.visibility);\r\n\r\n  /** Show scrollbar buttons */\r\n  buttons: InputSignalWithTransform<boolean, string | boolean> = input<boolean, string | boolean>(this.options.buttons, {\r\n    transform: booleanAttribute\r\n  });\r\n\r\n  /** Disables scrollbar interaction like dragging thumb and jumping by track click */\r\n  disableInteraction: InputSignalWithTransform<boolean, string | boolean> = input<boolean, string | boolean>(this.options.disableInteraction, {\r\n    transform: booleanAttribute\r\n  });\r\n\r\n  /** Whether ResizeObserver is disabled */\r\n  disableSensor: InputSignalWithTransform<boolean, string | boolean> = input<boolean, string | boolean>(this.options.disableSensor, {\r\n    transform: booleanAttribute\r\n  });\r\n\r\n  /** Throttle interval for detecting changes via ResizeObserver */\r\n  sensorThrottleTime: InputSignalWithTransform<number, string | number> = input<number, string | number>(this.options.sensorThrottleTime, {\r\n    transform: numberAttribute\r\n  });\r\n\r\n  /** A flag used to activate hover effect on the offset area around the scrollbar */\r\n  hoverOffset: InputSignalWithTransform<boolean, string | boolean> = input<boolean, string | boolean>(this.options.hoverOffset, {\r\n    transform: booleanAttribute\r\n  });\r\n\r\n  /** Viewport dimension */\r\n  viewportDimension: WritableSignal<ElementDimension> = signal<ElementDimension>({ width: 0, height: 0 });\r\n\r\n  /** Content dimension */\r\n  contentDimension: WritableSignal<ElementDimension> = signal<ElementDimension>({ width: 0, height: 0 });\r\n\r\n  private state: Signal<ViewportState> = computed(() => {\r\n    let verticalUsed: boolean = false;\r\n    let horizontalUsed: boolean = false;\r\n    let isVerticallyScrollable: boolean = false;\r\n    let isHorizontallyScrollable: boolean = false;\r\n\r\n    const orientation: ScrollbarOrientation = this.orientation();\r\n    const visibility: ScrollbarVisibility = this.visibility();\r\n\r\n    const viewportDimensions: ElementDimension = this.viewportDimension();\r\n    const contentDimensions: ElementDimension = this.contentDimension();\r\n\r\n    // Check if vertical scrollbar should be displayed\r\n    if (orientation === 'auto' || orientation === 'vertical') {\r\n      isVerticallyScrollable = contentDimensions.height > viewportDimensions.height;\r\n      verticalUsed = visibility === 'visible' || isVerticallyScrollable;\r\n    }\r\n    // Check if horizontal scrollbar should be displayed\r\n    if (orientation === 'auto' || orientation === 'horizontal') {\r\n      isHorizontallyScrollable = contentDimensions.width > viewportDimensions.width;\r\n      horizontalUsed = visibility === 'visible' || isHorizontallyScrollable;\r\n    }\r\n\r\n    return {\r\n      verticalUsed,\r\n      horizontalUsed,\r\n      isVerticallyScrollable,\r\n      isHorizontallyScrollable,\r\n    };\r\n  });\r\n\r\n  isVerticallyScrollable: Signal<boolean> = computed(() => this.state().isVerticallyScrollable);\r\n  isHorizontallyScrollable: Signal<boolean> = computed(() => this.state().isHorizontallyScrollable);\r\n  verticalUsed: Signal<boolean> = computed(() => this.state().verticalUsed);\r\n  horizontalUsed: Signal<boolean> = computed(() => this.state().horizontalUsed);\r\n\r\n  /** Scroll duration when the scroll track is clicked */\r\n  trackScrollDuration: InputSignalWithTransform<number, string | number> = input<number, string | number>(this.options.trackScrollDuration, {\r\n    transform: numberAttribute\r\n  });\r\n\r\n  /**\r\n   *  Sets the appearance of the scrollbar, there are 2 options:\r\n   *\r\n   * - `native` (default) scrollbar space will be reserved just like with native scrollbar.\r\n   * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.\r\n   */\r\n  appearance: InputSignal<ScrollbarAppearance> = input<ScrollbarAppearance>(this.options.appearance);\r\n  /**\r\n   * Sets the position of each scrollbar, there are 4 options:\r\n   *\r\n   * - `native` (Default) Use the default position like in native scrollbar.\r\n   * - `invertY` Inverts vertical scrollbar position\r\n   * - `invertX` Inverts Horizontal scrollbar position\r\n   * - `invertAll` Inverts both scrollbar positions\r\n   */\r\n  position: InputSignal<ScrollbarPosition> = input<ScrollbarPosition>(this.options.position);\r\n\r\n  /** A class forwarded to the scrollbar track element */\r\n  trackClass: InputSignal<string> = input<string>(this.options.trackClass);\r\n  /** A class forwarded to the scrollbar thumb element */\r\n  thumbClass: InputSignal<string> = input<string>(this.options.thumbClass);\r\n  /** A class forwarded to the scrollbar button element */\r\n  buttonClass: InputSignal<string> = input<string>(this.options.thumbClass);\r\n\r\n  /** Steam that emits when scrollbar is initialized */\r\n  afterInit: OutputEmitterRef<void> = output<void>();\r\n\r\n  /** Steam that emits when scrollbar is updated */\r\n  afterUpdate: OutputEmitterRef<void> = output<void>();\r\n\r\n  /** The scrollbars component instance used for testing purpose */\r\n  abstract _scrollbars: Signal<Scrollbars>;\r\n\r\n  protected constructor() {\r\n    let resizeSub$: Subscription;\r\n    let hasInitialized: boolean;\r\n\r\n    afterRenderEffect({\r\n      earlyRead: (onCleanup: EffectCleanupRegisterFn): void => {\r\n        const disableSensor: boolean = this.disableSensor();\r\n        const throttleDuration: number = this.sensorThrottleTime();\r\n        const viewportInit: boolean = this.viewport.initialized();\r\n\r\n        untracked(() => {\r\n          if (viewportInit) {\r\n            // If resize sensor is disabled, update manually the first time\r\n            if (disableSensor) {\r\n              requestAnimationFrame(() => this.update(ScrollbarUpdateReason.AfterInit));\r\n            } else {\r\n              // Observe size changes for viewport and content wrapper\r\n              this.zone.runOutsideAngular(() => {\r\n                resizeSub$ = getThrottledStream(\r\n                  combineLatest([\r\n                    this.sharedResizeObserver.observe(this.viewport.nativeElement),\r\n                    this.sharedResizeObserver.observe(this.viewport.contentWrapperElement)\r\n                  ]),\r\n                  throttleDuration\r\n                ).subscribe(() => {\r\n                  // After deep investigation, it appears that setting the dimension directly from the element properties\r\n                  // is much faster than to set them from resize callback values\r\n                  this.zone.run(() => {\r\n                    this.updateDimensions();\r\n\r\n                    if (hasInitialized) {\r\n                      this.afterUpdate.emit();\r\n                    } else {\r\n                      this.afterInit.emit();\r\n                    }\r\n                    hasInitialized = true;\r\n                  });\r\n                });\r\n              });\r\n            }\r\n          }\r\n\r\n          onCleanup(() => resizeSub$?.unsubscribe());\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Manual update\r\n   */\r\n  update(reason?: ScrollbarUpdateReason): void {\r\n    this.updateDimensions();\r\n\r\n    if (reason === ScrollbarUpdateReason.AfterInit) {\r\n      this.afterInit.emit();\r\n    } else {\r\n      this.afterUpdate.emit();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Smooth scroll functions\r\n   */\r\n  scrollTo(options: SmoothScrollToOptions): Promise<void> {\r\n    return this.smoothScroll.scrollTo(this.viewport.nativeElement, options);\r\n  }\r\n\r\n  /**\r\n   * Scroll to element by reference or selector\r\n   */\r\n  scrollToElement(target: SmoothScrollElement, options?: SmoothScrollToElementOptions): Promise<void> {\r\n    return this.smoothScroll.scrollToElement(this.viewport.nativeElement, target, options);\r\n  }\r\n\r\n  private updateDimensions(): void {\r\n    this.viewportDimension.set({ width: this.viewport.offsetWidth, height: this.viewport.offsetHeight });\r\n    this.contentDimension.set({ width: this.viewport.contentWidth, height: this.viewport.contentHeight });\r\n  }\r\n}\r\n","import { Directive, inject, signal, WritableSignal, InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { NG_SCROLLBAR, _NgScrollbar } from '../utils/scrollbar-base';\r\n\r\nexport const SCROLLBAR_CONTROL: InjectionToken<ScrollbarAdapter> = new InjectionToken<ScrollbarAdapter>('SCROLLBAR_CONTROL');\r\n\r\n@Directive()\r\nexport abstract class ScrollbarAdapter {\r\n\r\n  trackSize: WritableSignal<number> = signal(0);\r\n\r\n  abstract readonly rectOffsetProperty: 'left' | 'top';\r\n\r\n  abstract readonly rectSizeProperty: 'width' | 'height';\r\n\r\n  abstract readonly sizeProperty: 'offsetWidth' | 'offsetHeight';\r\n\r\n  // Returns either 'clientX' or 'clientY' coordinate of the pointer relative to the viewport\r\n  abstract readonly clientProperty: 'clientX' | 'clientY';\r\n\r\n  // Returns either 'offsetX' or 'offsetY' coordinate of the pointer relative to the edge of the element\r\n  abstract readonly offsetProperty: 'offsetX' | 'offsetY'\r\n\r\n  // Return axis\r\n  abstract readonly axis: 'x' | 'y';\r\n\r\n  // Returns viewport scroll max\r\n  abstract get viewportScrollMax(): number;\r\n\r\n  // Returns viewport offset\r\n  abstract get viewportScrollOffset(): number;\r\n\r\n  // Host component reference\r\n  readonly cmp: _NgScrollbar = inject(NG_SCROLLBAR);\r\n\r\n  abstract scrollTo(value: number, duration: number): Observable<void>;\r\n\r\n  abstract instantScrollTo(value: number, scrollMax?: number): void;\r\n}\r\n","import { Directive, effect, inject, untracked, ElementRef, NgZone, EffectCleanupRegisterFn } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { _NgScrollbar, NG_SCROLLBAR } from '../utils/scrollbar-base';\r\nimport { SCROLLBAR_CONTROL, ScrollbarAdapter } from '../scrollbar/scrollbar-adapter';\r\n\r\n@Directive()\r\nexport abstract class PointerEventsAdapter {\r\n\r\n  // Reference to the NgScrollbar component\r\n  protected readonly cmp: _NgScrollbar = inject(NG_SCROLLBAR);\r\n\r\n  // Reference to the Scrollbar control component\r\n  protected readonly control: ScrollbarAdapter = inject(SCROLLBAR_CONTROL);\r\n\r\n  // Reference to the Document element\r\n  protected readonly document: Document = inject(DOCUMENT);\r\n\r\n  // Reference to angular zone\r\n  protected readonly zone: NgZone = inject(NgZone);\r\n\r\n  // The native element of the directive\r\n  readonly nativeElement: HTMLElement = inject(ElementRef<HTMLElement>).nativeElement;\r\n\r\n  // Pointer events subscription (made public for testing purpose)\r\n  _pointerEventsSub: Subscription;\r\n\r\n  abstract get pointerEvents(): Observable<PointerEvent>;\r\n\r\n  protected constructor() {\r\n    effect((onCleanup: EffectCleanupRegisterFn) => {\r\n      const disableInteraction: boolean = this.cmp.disableInteraction();\r\n\r\n      untracked(() => {\r\n        if (!disableInteraction) {\r\n          this.zone.runOutsideAngular(() => {\r\n            this._pointerEventsSub = this.pointerEvents.subscribe();\r\n          });\r\n        }\r\n\r\n        onCleanup(() => this._pointerEventsSub?.unsubscribe());\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Directive, untracked, afterRenderEffect } from '@angular/core';\r\nimport {\r\n  Observable,\r\n  tap,\r\n  map,\r\n  merge,\r\n  delay,\r\n  fromEvent,\r\n  startWith,\r\n  switchMap,\r\n  takeUntil,\r\n  takeWhile,\r\n  EMPTY\r\n} from 'rxjs';\r\nimport { enableSelection, preventSelection, stopPropagation } from '../utils/common';\r\nimport { PointerEventsAdapter } from '../utils/pointer-events-adapter';\r\n\r\n@Directive()\r\nexport abstract class TrackAdapter extends PointerEventsAdapter {\r\n\r\n  // The current position of the mouse during track dragging\r\n  private currMousePosition: number;\r\n\r\n  // The direction of scroll when the track area is clicked\r\n  protected scrollDirection: 'forward' | 'backward';\r\n\r\n  // The maximum scroll position until the end is reached\r\n  protected scrollMax: number;\r\n\r\n  // Returns viewport scroll size\r\n  protected abstract get contentSize(): number;\r\n\r\n  // Returns viewport client size\r\n  protected get viewportSize(): number {\r\n    return this.cmp.viewport[this.control.sizeProperty];\r\n  }\r\n\r\n  // Get track client rect\r\n  protected get clientRect(): DOMRect {\r\n    return this.nativeElement.getBoundingClientRect();\r\n  }\r\n\r\n  // Returns the scroll position relative to the track\r\n  protected abstract getCurrPosition(): number;\r\n\r\n  // Returns the dragging direction forward or backward\r\n  protected abstract getScrollDirection(position: number): 'forward' | 'backward';\r\n\r\n  // Function that scrolls to the given position\r\n  protected abstract scrollTo(position: number): Observable<void>;\r\n\r\n  // Scrollbar track offset\r\n  get offset(): number {\r\n    return this.clientRect[this.control.rectOffsetProperty];\r\n  }\r\n\r\n  // Scrollbar track length\r\n  get size(): number {\r\n    // Noticed that clientHeight is evaluated before getClientRect.height,\r\n    // causing a wrong track size when integrated in dropdown integration\r\n    return this.nativeElement[this.control.sizeProperty];\r\n  }\r\n\r\n  // Observable for track dragging events\r\n  get pointerEvents(): Observable<PointerEvent> {\r\n    // Observable streams for pointer events\r\n    const pointerDown$: Observable<PointerEvent> = fromEvent<PointerEvent>(this.nativeElement, 'pointerdown').pipe(\r\n      stopPropagation(),\r\n      preventSelection(this.document)\r\n    );\r\n    const pointerUp$: Observable<PointerEvent> = fromEvent<PointerEvent>(this.document, 'pointerup', { passive: true }).pipe(\r\n      enableSelection(this.document)\r\n    );\r\n\r\n    const pointerEnter$: Observable<boolean> = fromEvent<PointerEvent>(this.nativeElement, 'pointerover', { passive: true }).pipe(\r\n      // When mouse is out and enters again, must set the current position first\r\n      tap((e: PointerEvent) => this.currMousePosition = e[this.control.offsetProperty]),\r\n      map(() => true)\r\n    );\r\n    const pointerLeave$: Observable<boolean> = fromEvent<PointerEvent>(this.nativeElement, 'pointerout', { passive: true }).pipe(\r\n      map(() => false)\r\n    );\r\n\r\n    const pointerOver$: Observable<boolean> = merge(pointerEnter$, pointerLeave$).pipe(startWith(true));\r\n\r\n    // Keep track of current mouse location while dragging\r\n    const pointerMove$: Observable<PointerEvent> = fromEvent<PointerEvent>(this.nativeElement, 'pointermove', { passive: true }).pipe(\r\n      tap((e: PointerEvent) => this.currMousePosition = e[this.control.offsetProperty])\r\n    );\r\n\r\n    return pointerDown$.pipe(\r\n      switchMap((startEvent: PointerEvent) => {\r\n        // Track pointer location while dragging\r\n        pointerMove$.pipe(takeUntil(pointerUp$)).subscribe();\r\n\r\n        return this.onTrackFirstClick(startEvent).pipe(\r\n          delay(200),\r\n          switchMap(() => {\r\n            // Otherwise, activate pointermove and pointerout events and switch to ongoing scroll calls\r\n            return pointerOver$.pipe(\r\n              switchMap((over: boolean) => {\r\n                const currDirection: 'forward' | 'backward' = this.getScrollDirection(this.currMousePosition);\r\n                const sameDirection: boolean = this.scrollDirection === currDirection;\r\n                // If mouse is out the track pause the scroll calls, otherwise keep going\r\n                return (over && sameDirection) ? this.onTrackOngoingMousedown() : EMPTY;\r\n              }),\r\n            ) as Observable<PointerEvent>;\r\n          }),\r\n          takeUntil(pointerUp$),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  constructor() {\r\n    afterRenderEffect({\r\n      earlyRead: (): void => {\r\n        this.cmp.viewportDimension();\r\n        this.cmp.contentDimension();\r\n\r\n        untracked(() => {\r\n          this.control.trackSize.set(this.size);\r\n          if (!this.size) {\r\n            // In some rare cases size could be 0 due to first render, use animation frame to give the track element time to render\r\n            requestAnimationFrame(() => this.control.trackSize.set(this.size));\r\n          }\r\n        });\r\n      }\r\n    });\r\n    super();\r\n  }\r\n\r\n  protected abstract getScrollForwardStep(): number;\r\n\r\n  protected abstract getScrollBackwardStep(): number;\r\n\r\n  /**\r\n   *  Callback when mouse is first clicked on the track\r\n   */\r\n  onTrackFirstClick(e: PointerEvent): Observable<void> {\r\n    // Initialize variables and determine scroll direction\r\n    this.currMousePosition = e[this.control.offsetProperty];\r\n    this.scrollDirection = this.getScrollDirection(this.currMousePosition);\r\n    this.scrollMax = this.control.viewportScrollMax;\r\n    return this.scrollTo(this.nextStep());\r\n  }\r\n\r\n  private nextStep(): number {\r\n    // Check which direction should the scroll go (forward or backward)\r\n    if (this.scrollDirection === 'forward') {\r\n      // Scroll forward\r\n      const scrollForwardIncrement: number = this.getScrollForwardStep();\r\n\r\n      // Check if the incremental position is bigger than the scroll max\r\n      if (scrollForwardIncrement >= this.scrollMax) {\r\n        return this.scrollMax;\r\n      }\r\n      return scrollForwardIncrement;\r\n    }\r\n    // Scroll backward\r\n    const scrollBackwardIncrement: number = this.getScrollBackwardStep();\r\n\r\n    if (scrollBackwardIncrement <= 0) {\r\n      return 0;\r\n    }\r\n    return scrollBackwardIncrement;\r\n  }\r\n\r\n  /**\r\n   * Callback when mouse is still down on the track\r\n   * Incrementally scrolls towards target position until reached\r\n   */\r\n  onTrackOngoingMousedown(): Observable<unknown> {\r\n    const position: number = this.nextStep();\r\n    return this.scrollTo(position).pipe(\r\n      takeWhile(() => !this.isReached(position)),\r\n      switchMap(() => this.onTrackOngoingMousedown())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a flag that determines whether the scroll from the given position is the final step or not\r\n   */\r\n  private isReached(position: number): boolean {\r\n    if (this.scrollDirection === 'forward') {\r\n      return position >= this.scrollMax;\r\n    }\r\n    return position <= 0;\r\n  }\r\n}\r\n","import { Directive, effect } from '@angular/core';\r\nimport { from, Observable } from 'rxjs';\r\nimport { TrackAdapter } from './track-adapter';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[scrollbarTrackX]',\r\n  providers: [{ provide: TrackAdapter, useExisting: TrackXDirective }]\r\n})\r\nexport class TrackXDirective extends TrackAdapter {\r\n\r\n  protected get contentSize(): number {\r\n    return this.cmp.viewport.contentWidth;\r\n  }\r\n\r\n  getCurrPosition: () => number;\r\n\r\n  getScrollDirection: (position: number) => 'forward' | 'backward';\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      if (this.cmp.direction() === 'rtl') {\r\n        this.getCurrPosition = (): number => {\r\n          const offset: number = this.contentSize - this.viewportSize - this.control.viewportScrollOffset;\r\n          return offset * this.size / this.contentSize;\r\n        };\r\n        this.getScrollDirection = (position: number): 'forward' | 'backward' => {\r\n          return position < this.getCurrPosition() ? 'forward' : 'backward';\r\n        };\r\n      } else {\r\n        this.getCurrPosition = (): number => {\r\n          return this.control.viewportScrollOffset * this.size / this.contentSize;\r\n        };\r\n        this.getScrollDirection = (position: number): 'forward' | 'backward' => {\r\n          return position > this.getCurrPosition() ? 'forward' : 'backward';\r\n        };\r\n      }\r\n    });\r\n    super();\r\n  }\r\n\r\n  protected scrollTo(start: number): Observable<void> {\r\n    return from(this.cmp.scrollTo({ start, duration: this.cmp.trackScrollDuration() }));\r\n  }\r\n\r\n  protected getScrollForwardStep(): number {\r\n    return this.control.viewportScrollOffset + this.viewportSize;\r\n  }\r\n\r\n  protected getScrollBackwardStep(): number {\r\n    return this.control.viewportScrollOffset - this.viewportSize;\r\n  }\r\n}\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[scrollbarTrackY]',\r\n  providers: [{ provide: TrackAdapter, useExisting: TrackYDirective }]\r\n})\r\nexport class TrackYDirective extends TrackAdapter {\r\n\r\n  protected get contentSize(): number {\r\n    return this.cmp.viewport.contentHeight;\r\n  }\r\n\r\n  protected getCurrPosition(): number {\r\n    return this.control.viewportScrollOffset * this.size / this.contentSize;\r\n  }\r\n\r\n  protected getScrollDirection(position: number): 'forward' | 'backward' {\r\n    return position > this.getCurrPosition() ? 'forward' : 'backward';\r\n  }\r\n\r\n  protected scrollTo(top: number): Observable<void> {\r\n    return from(this.cmp.scrollTo({ top, duration: this.cmp.trackScrollDuration() }));\r\n  }\r\n\r\n  protected getScrollForwardStep(): number {\r\n    return this.control.viewportScrollOffset + this.viewportSize;\r\n  }\r\n\r\n  protected getScrollBackwardStep(): number {\r\n    return this.control.viewportScrollOffset - this.viewportSize;\r\n  }\r\n}\r\n","import { Injectable, inject, signal, WritableSignal, PLATFORM_ID } from '@angular/core';\r\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\r\nimport { NG_SCROLLBAR_POLYFILL } from '../ng-scrollbar.model';\r\nimport { ScrollTimelineFunc } from './common';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ScrollbarManager {\r\n\r\n  private readonly isBrowser: boolean = isPlatformBrowser(inject(PLATFORM_ID));\r\n\r\n  readonly _polyfillUrl: string = inject(NG_SCROLLBAR_POLYFILL);\r\n\r\n  readonly document: Document = inject(DOCUMENT);\r\n\r\n  readonly window: Window = this.document.defaultView;\r\n\r\n  readonly scrollTimelinePolyfill: WritableSignal<ScrollTimelineFunc> = signal(null);\r\n\r\n  constructor() {\r\n    if (this.isBrowser && (!this.window['ScrollTimeline'] || !CSS.supports('animation-timeline', 'scroll()'))) {\r\n      this.initPolyfill();\r\n    }\r\n  }\r\n\r\n  async initPolyfill(): Promise<void> {\r\n    try {\r\n      // Create a script element\r\n      const script: HTMLScriptElement = this.document.createElement('script');\r\n      script.src = this._polyfillUrl;\r\n\r\n      // Wait for the script to load\r\n      await new Promise<Event>((resolve, reject) => {\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n        this.document.head.appendChild(script);\r\n      });\r\n\r\n      // Once loaded, access and execute the function attached to the window object\r\n      if (this.window['ScrollTimeline']) {\r\n        this.scrollTimelinePolyfill.set(this.window['ScrollTimeline']);\r\n      } else {\r\n        console.error('[NgScrollbar]: ScrollTimeline is not attached to the window object.');\r\n      }\r\n    } catch (error) {\r\n      console.error('[NgScrollbar]: Error loading ScrollTimeline script:', error);\r\n    }\r\n  }\r\n}\r\n","import { Directive, inject, untracked, afterRenderEffect } from '@angular/core';\r\nimport { Observable, of, fromEvent, map, takeUntil, tap, switchMap } from 'rxjs';\r\nimport {\r\n  ScrollbarDragging,\r\n  ScrollTimelineFunc,\r\n  stopPropagation,\r\n  enableSelection,\r\n  preventSelection\r\n} from '../utils/common';\r\nimport { ScrollbarManager } from '../utils/scrollbar-manager';\r\nimport { TrackAdapter } from '../track/track-adapter';\r\nimport { PointerEventsAdapter } from '../utils/pointer-events-adapter';\r\n\r\n@Directive()\r\nexport abstract class ThumbAdapter extends PointerEventsAdapter {\r\n\r\n  protected readonly manager: ScrollbarManager = inject(ScrollbarManager);\r\n\r\n  private readonly track: TrackAdapter = inject(TrackAdapter);\r\n\r\n  // The animation reference used for enabling the polyfill on Safari and Firefox.\r\n  _animation: Animation;\r\n\r\n  // Returns thumb size\r\n  get size(): number {\r\n    return this.nativeElement.getBoundingClientRect()[this.control.rectSizeProperty];\r\n  }\r\n\r\n  // The maximum space available for scrolling.\r\n  get trackMax(): number {\r\n    return this.track.size - this.size;\r\n  }\r\n\r\n  /**\r\n   * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged\r\n   * This function is called by thumb drag event using viewport or scrollbar pointer events\r\n   */\r\n  get pointerEvents(): Observable<PointerEvent> {\r\n    return fromEvent<PointerEvent>(this.nativeElement, 'pointerdown').pipe(\r\n      stopPropagation(),\r\n      preventSelection(this.document),\r\n      switchMap((e: PointerEvent) => {\r\n        let startTrackMax: number;\r\n        let startScrollMax: number;\r\n\r\n        const dragStart: Observable<PointerEvent> = of<PointerEvent>(e).pipe(\r\n          tap(() => {\r\n            // Capture scrollMax and trackMax once\r\n            startTrackMax = this.trackMax;\r\n            startScrollMax = this.control.viewportScrollMax;\r\n            this.setDragging(this.control.axis);\r\n          }),\r\n        );\r\n\r\n        const dragging: Observable<PointerEvent> = fromEvent<PointerEvent>(this.document, 'pointermove').pipe(stopPropagation());\r\n\r\n        const dragEnd: Observable<PointerEvent> = fromEvent<PointerEvent>(this.document, 'pointerup', { capture: true }).pipe(\r\n          stopPropagation(),\r\n          enableSelection(this.document),\r\n          tap(() => this.setDragging('none'))\r\n        );\r\n\r\n        return dragStart.pipe(\r\n          map((startEvent: PointerEvent) => startEvent[this.control.offsetProperty]),\r\n          switchMap((startOffset: number) => dragging.pipe(\r\n            map((moveEvent: PointerEvent) => moveEvent[this.control.clientProperty]),\r\n            // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).\r\n            map((moveClient: number) => moveClient - this.track.offset),\r\n            map((trackRelativeOffset: number) => startScrollMax * (trackRelativeOffset - startOffset) / startTrackMax),\r\n            tap((scrollPosition: number) => this.control.instantScrollTo(scrollPosition, startScrollMax)),\r\n            takeUntil(dragEnd)\r\n          ) as Observable<PointerEvent>)\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  constructor() {\r\n    afterRenderEffect({\r\n      earlyRead: (): void => {\r\n        const script: ScrollTimelineFunc = this.manager.scrollTimelinePolyfill();\r\n        untracked(() => {\r\n          if (script && !this._animation) {\r\n            this._animation = startPolyfill(script, this.nativeElement, this.cmp.viewport.nativeElement, this.control.axis);\r\n          }\r\n        });\r\n      }\r\n    });\r\n    super();\r\n  }\r\n\r\n  private setDragging(value: ScrollbarDragging): void {\r\n    this.zone.run(() => this.cmp.dragging.set(value));\r\n  }\r\n}\r\n\r\nfunction startPolyfill(ScrollTimeline: ScrollTimelineFunc, element: HTMLElement, source: HTMLElement, axis: 'x' | 'y'): Animation {\r\n  return element.animate(\r\n    {\r\n      translate: [\r\n        'var(--_scrollbar-thumb-transform-from)',\r\n        'var(--_scrollbar-thumb-transform-to)'\r\n      ]\r\n    },\r\n    {\r\n      fill: 'both',\r\n      easing: 'linear',\r\n      timeline: new ScrollTimeline({ source, axis })\r\n    }\r\n  );\r\n}\r\n","import { Directive } from '@angular/core';\r\nimport { ThumbAdapter } from './thumb-adapter';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[scrollbarThumbX]',\r\n  providers: [{ provide: ThumbAdapter, useExisting: ThumbXDirective }]\r\n})\r\nexport class ThumbXDirective extends ThumbAdapter {\r\n}\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: '[scrollbarThumbY]',\r\n  providers: [{ provide: ThumbAdapter, useExisting: ThumbYDirective }]\r\n})\r\nexport class ThumbYDirective extends ThumbAdapter {\r\n}\r\n","import { Component, effect, untracked, input, InputSignal, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Direction } from '@angular/cdk/bidi';\r\nimport {\r\n  Observable,\r\n  tap,\r\n  delay,\r\n  merge,\r\n  switchMap,\r\n  fromEvent,\r\n  takeUntil,\r\n  interval,\r\n  takeWhile,\r\n  animationFrameScheduler\r\n} from 'rxjs';\r\nimport { enableSelection, preventSelection, stopPropagation } from '../utils/common';\r\nimport { PointerEventsAdapter } from '../utils/pointer-events-adapter';\r\n\r\ntype CanScrollFn = (offset: number, scrollMax?: number) => boolean;\r\n\r\ntype ScrollStepFn = (scrollBy: number, offset: number, scrollMax: number) => number;\r\n\r\n// canScroll function can work for y-axis and x-axis for both LTR and RTL directions\r\nconst canScrollFunc: Record<'forward' | 'backward', CanScrollFn> = {\r\n  forward: (scrollOffset: number, scrollMax: number): boolean => scrollOffset < scrollMax,\r\n  backward: (scrollOffset: number): boolean => scrollOffset > 0\r\n}\r\n\r\nconst scrollStepFunc: Record<'forward' | 'backward', ScrollStepFn> = {\r\n  forward: (scrollBy: number, offset: number) => offset + scrollBy,\r\n  backward: (scrollBy: number, offset: number) => offset - scrollBy\r\n};\r\n\r\nconst horizontalScrollStepFunc: Record<'ltr' | 'rtl', Record<'forward' | 'backward', ScrollStepFn>> = {\r\n  rtl: {\r\n    forward: (scrollBy: number, offset: number, scrollMax: number) => scrollMax - offset - scrollBy,\r\n    backward: (scrollBy: number, offset: number, scrollMax: number) => scrollMax - offset + scrollBy\r\n  },\r\n  ltr: scrollStepFunc\r\n}\r\n\r\n@Component({\r\n  selector: 'button[scrollbarButton]',\r\n  templateUrl: './scrollbar-button.component.html',\r\n  styleUrl: './scrollbar-button.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollbarButton extends PointerEventsAdapter {\r\n\r\n  scrollbarButton: InputSignal<'top' | 'bottom' | 'start' | 'end'> = input.required();\r\n  scrollDirection: InputSignal<'forward' | 'backward'> = input.required();\r\n\r\n  private afterFirstClickDelay: number = 120;\r\n  private firstClickDuration: number = 100;\r\n  private scrollBy: number = 50;\r\n  private onGoingScrollBy: number = 12;\r\n\r\n  private nextStep: (scrollBy: number, offset: number, scrollMax: number) => number;\r\n  private canScroll: (offset: number, scrollMax: number) => boolean;\r\n\r\n  get pointerEvents(): Observable<PointerEvent> {\r\n    const pointerDown$: Observable<PointerEvent> = fromEvent<PointerEvent>(this.nativeElement, 'pointerdown').pipe(\r\n      stopPropagation(),\r\n      preventSelection(this.document)\r\n    );\r\n    const pointerUp$: Observable<PointerEvent> = fromEvent<PointerEvent>(this.document, 'pointerup', { passive: true }).pipe(\r\n      enableSelection(this.document)\r\n    );\r\n\r\n    const pointerLeave$: Observable<PointerEvent> = fromEvent<PointerEvent>(this.nativeElement, 'pointerleave', { passive: true });\r\n\r\n    // Combine pointerup and pointerleave events into one stream\r\n    const pointerUpOrLeave$: Observable<PointerEvent> = merge(pointerUp$, pointerLeave$);\r\n\r\n    return pointerDown$.pipe(\r\n      switchMap(() => this.firstScrollStep().pipe(\r\n        delay(this.afterFirstClickDelay),\r\n        switchMap(() => this.onOngoingPointerdown()),\r\n        takeUntil(pointerUpOrLeave$),\r\n      ))\r\n    );\r\n  }\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const scrollDirection: 'forward' | 'backward' = this.scrollDirection();\r\n      const dir: Direction = this.cmp.direction();\r\n\r\n      untracked(() => {\r\n        // Get the canScroll function according to scroll direction (forward/backward)\r\n        this.canScroll = canScrollFunc[scrollDirection];\r\n\r\n        if (this.control.axis === 'x') {\r\n          // Get the nextStep function according to scroll direction (forward/backward) and layout direction (LTR/RTL)\r\n          this.nextStep = horizontalScrollStepFunc[dir][scrollDirection];\r\n        } else {\r\n          // Get the nextStep function according to scroll direction (forward/backward)\r\n          this.nextStep = scrollStepFunc[scrollDirection];\r\n        }\r\n      });\r\n    });\r\n    super();\r\n  }\r\n\r\n  private firstScrollStep(): Observable<void> {\r\n    const value: number = this.nextStep(this.scrollBy, this.control.viewportScrollOffset, this.control.viewportScrollMax);\r\n    return this.control.scrollTo(value, this.firstClickDuration);\r\n  }\r\n\r\n  private onGoingScrollStep(): void {\r\n    const scrollMax: number = this.control.viewportScrollMax;\r\n    const value: number = this.nextStep(this.onGoingScrollBy, this.control.viewportScrollOffset, scrollMax);\r\n    this.control.instantScrollTo(value, scrollMax);\r\n  }\r\n\r\n  private onOngoingPointerdown(): Observable<PointerEvent> {\r\n    return interval(0, animationFrameScheduler).pipe(\r\n      takeWhile(() => this.canScroll(this.control.viewportScrollOffset, this.control.viewportScrollMax)),\r\n      tap(() => this.onGoingScrollStep())\r\n    ) as Observable<PointerEvent>;\r\n  }\r\n}\r\n","<div class=\"ng-scrollbar-button-icon\">\r\n  <svg viewBox=\"0 0 512 512\"\r\n       xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path\r\n      d=\"M413.1,327.3l-1.8-2.1l-136-156.5c-4.6-5.3-11.5-8.6-19.2-8.6c-7.7,0-14.6,3.4-19.2,8.6L101,324.9l-2.3,2.6  C97,330,96,333,96,336.2c0,8.7,7.4,15.8,16.6,15.8v0h286.8v0c9.2,0,16.6-7.1,16.6-15.8C416,332.9,414.9,329.8,413.1,327.3z\"/>\r\n  </svg>\r\n</div>\r\n","import { Component, effect, inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { from, Observable } from 'rxjs';\r\nimport { TrackXDirective, TrackYDirective } from '../track/track';\r\nimport { ThumbXDirective, ThumbYDirective } from '../thumb/thumb';\r\nimport { SCROLLBAR_CONTROL, ScrollbarAdapter } from './scrollbar-adapter';\r\nimport { ScrollbarButton } from '../button/scrollbar-button.component';\r\nimport { ScrollbarManager } from '../utils/scrollbar-manager';\r\n\r\n@Component({\r\n  selector: 'scrollbar-y',\r\n  template: `\r\n    <div class=\"ng-scrollbar-sticky\"\r\n         [class.ng-scrollbar-hover]=\"cmp.hoverOffset()\">\r\n      <div class=\"ng-scrollbar-track-wrapper\"\r\n           [class.ng-scrollbar-hover]=\"!cmp.hoverOffset()\">\r\n        <div scrollbarTrackY class=\"ng-scrollbar-track {{ cmp.trackClass() }}\">\r\n          <div scrollbarThumbY class=\"ng-scrollbar-thumb {{ cmp.thumbClass() }}\"></div>\r\n        </div>\r\n        @if (cmp.buttons()) {\r\n          <button class=\"ng-scrollbar-button {{ cmp.buttonClass() }}\"\r\n                  scrollbarButton=\"top\"\r\n                  scrollDirection=\"backward\"></button>\r\n          <button class=\"ng-scrollbar-button {{ cmp.buttonClass() }}\"\r\n                  scrollbarButton=\"bottom\"\r\n                  scrollDirection=\"forward\"></button>\r\n        }\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./shared.scss', './vertical.scss'],\r\n  imports: [TrackYDirective, ThumbYDirective, ScrollbarButton],\r\n  providers: [\r\n    { provide: SCROLLBAR_CONTROL, useExisting: ScrollbarY }\r\n  ],\r\n  host: {\r\n    '[style.--track-size]': 'trackSize()'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollbarY extends ScrollbarAdapter {\r\n\r\n  readonly rectOffsetProperty: 'left' | 'top' = 'top';\r\n\r\n  readonly rectSizeProperty: 'width' | 'height' = 'height';\r\n\r\n  readonly sizeProperty: 'offsetWidth' | 'offsetHeight' = 'offsetHeight';\r\n\r\n  readonly clientProperty: 'clientX' | 'clientY' = 'clientY';\r\n\r\n  readonly offsetProperty: 'offsetX' | 'offsetY' = 'offsetY';\r\n\r\n  readonly axis: 'x' | 'y' = 'y';\r\n\r\n  get viewportScrollMax(): number {\r\n    return this.cmp.viewport.scrollMaxY;\r\n  }\r\n\r\n  get viewportScrollOffset(): number {\r\n    return this.cmp.viewport.scrollTop;\r\n  }\r\n\r\n  scrollTo(top: number, duration: number): Observable<void> {\r\n    return from(this.cmp.scrollTo({ top, duration }));\r\n  }\r\n\r\n  instantScrollTo(value: number): void {\r\n    this.cmp.viewport.scrollYTo(value);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'scrollbar-x',\r\n  template: `\r\n    <div class=\"ng-scrollbar-sticky\"\r\n         [class.ng-scrollbar-hover]=\"cmp.hoverOffset()\">\r\n      <div class=\"ng-scrollbar-track-wrapper\"\r\n           [class.ng-scrollbar-hover]=\"!cmp.hoverOffset()\">\r\n        <div scrollbarTrackX class=\"ng-scrollbar-track {{ cmp.trackClass() }}\">\r\n          <div scrollbarThumbX class=\"ng-scrollbar-thumb {{ cmp.thumbClass() }}\"></div>\r\n        </div>\r\n        @if (cmp.buttons()) {\r\n          <button class=\"ng-scrollbar-button {{ cmp.buttonClass() }}\"\r\n                  scrollbarButton=\"start\"\r\n                  scrollDirection=\"backward\"></button>\r\n          <button class=\"ng-scrollbar-button {{ cmp.buttonClass() }}\"\r\n                  scrollbarButton=\"end\"\r\n                  scrollDirection=\"forward\"></button>\r\n        }\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./shared.scss', './horizontal.scss'],\r\n  imports: [TrackXDirective, ThumbXDirective, ScrollbarButton],\r\n  providers: [\r\n    { provide: SCROLLBAR_CONTROL, useExisting: ScrollbarX }\r\n  ],\r\n  host: {\r\n    '[attr.dir]': 'cmp.direction()',\r\n    '[style.--track-size]': 'trackSize()'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScrollbarX extends ScrollbarAdapter {\r\n\r\n  readonly manager: ScrollbarManager = inject(ScrollbarManager);\r\n\r\n  readonly rectOffsetProperty: 'left' | 'top' = 'left';\r\n\r\n  readonly rectSizeProperty: 'width' | 'height' = 'width';\r\n\r\n  readonly sizeProperty: 'offsetWidth' | 'offsetHeight' = 'offsetWidth';\r\n\r\n  readonly clientProperty: 'clientX' | 'clientY' = 'clientX';\r\n\r\n  readonly offsetProperty: 'offsetX' | 'offsetY' = 'offsetX';\r\n\r\n  readonly axis: 'x' | 'y' = 'x';\r\n\r\n  // Handle dragging position (Support LTR and RTL directions for the horizontal scrollbar)\r\n  private handlePosition: (value: number, scrollMax: number) => number;\r\n\r\n  get viewportScrollMax(): number {\r\n    return this.cmp.viewport.scrollMaxX;\r\n  }\r\n\r\n  get viewportScrollOffset(): number {\r\n    // Keep scrollLeft value positive for horizontal scrollbar\r\n    return Math.abs(this.cmp.viewport.scrollLeft);\r\n  }\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      if (this.cmp.direction() === 'rtl') {\r\n        this.handlePosition = (position: number, scrollMax: number): number => -(scrollMax - position);\r\n      } else {\r\n        this.handlePosition = (position: number): number => position;\r\n      }\r\n    });\r\n    super();\r\n  }\r\n\r\n  scrollTo(left: number, duration: number): Observable<void> {\r\n    return from(this.cmp.scrollTo({ left, duration }));\r\n  }\r\n\r\n  instantScrollTo(value: number, scrollMax?: number): void {\r\n    this.cmp.viewport.scrollXTo(this.handlePosition(value, scrollMax));\r\n  }\r\n}\r\n","import { Component, inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ScrollbarX, ScrollbarY } from '../scrollbar/scrollbar';\r\nimport { NG_SCROLLBAR, _NgScrollbar } from '../utils/scrollbar-base';\r\n\r\n@Component({\r\n  selector: 'scrollbars',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  imports: [ScrollbarX, ScrollbarY],\r\n  template: `\r\n    @if (cmp.verticalUsed()) {\r\n      <scrollbar-y/>\r\n    }\r\n    @if (cmp.horizontalUsed()) {\r\n      <scrollbar-x/>\r\n    }\r\n  `,\r\n  styles: [`\r\n    :host {\r\n      display: contents;\r\n    }\r\n  `]\r\n})\r\nexport class Scrollbars {\r\n  cmp: _NgScrollbar = inject(NG_SCROLLBAR);\r\n}\r\n","import { Component, effect, untracked, viewChild, Signal, ElementRef, ChangeDetectionStrategy } from '@angular/core';\r\nimport { ViewportAdapter } from './viewport';\r\nimport { NgScrollbarCore } from './ng-scrollbar-core';\r\nimport { NG_SCROLLBAR } from './utils/scrollbar-base';\r\nimport { Scrollbars } from './scrollbars/scrollbars';\r\n\r\n@Component({\r\n  selector: 'ng-scrollbar:not([externalViewport])',\r\n  exportAs: 'ngScrollbar',\r\n  imports: [Scrollbars],\r\n  template: `\r\n    <div #contentWrapper>\r\n      <ng-content/>\r\n      <scrollbars/>\r\n    </div>\r\n  `,\r\n  styleUrl: './ng-scrollbar.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    { provide: NG_SCROLLBAR, useExisting: NgScrollbar },\r\n    ViewportAdapter\r\n  ]\r\n})\r\nexport class NgScrollbar extends NgScrollbarCore {\r\n\r\n  contentWrapper: Signal<ElementRef<HTMLElement>> = viewChild.required('contentWrapper');\r\n\r\n  _scrollbars: Signal<Scrollbars> = viewChild.required(Scrollbars);\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const contentWrapper: HTMLElement = this.contentWrapper().nativeElement;\r\n      untracked(() => {\r\n        this.viewport.init(this.nativeElement, contentWrapper);\r\n      });\r\n    });\r\n    super();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  inject,\r\n  signal,\r\n  effect,\r\n  computed,\r\n  untracked,\r\n  linkedSignal,\r\n  createComponent,\r\n  input,\r\n  contentChild,\r\n  Signal,\r\n  InputSignal,\r\n  WritableSignal,\r\n  Injector,\r\n  OnDestroy,\r\n  Renderer2,\r\n  ComponentRef,\r\n  ApplicationRef,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { ScrollViewport, ViewportAdapter } from './viewport';\r\nimport { NgScrollbar } from './ng-scrollbar';\r\nimport { NgScrollbarCore } from './ng-scrollbar-core';\r\nimport { NG_SCROLLBAR } from './utils/scrollbar-base';\r\nimport { Scrollbars } from './scrollbars/scrollbars';\r\n\r\n@Component({\r\n  standalone: true,\r\n  selector: 'ng-scrollbar[externalViewport]',\r\n  exportAs: 'ngScrollbar',\r\n  template: '<ng-content/>',\r\n  styleUrl: 'ng-scrollbar.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    // This component appends a content wrapper element to the viewport\r\n    // A hydration mismatch error will be thrown (NG0500) during DOM manipulation.\r\n    // To avoid this error, the 'ngSkipHydration' attribute is added to skip hydration.\r\n    ngSkipHydration: 'true',\r\n    '[class.ng-scrollbar-external-viewport]': 'true'\r\n  },\r\n  providers: [\r\n    { provide: NG_SCROLLBAR, useExisting: NgScrollbarExt },\r\n    { provide: NgScrollbarCore, useExisting: NgScrollbar },\r\n    ViewportAdapter\r\n  ],\r\n})\r\nexport class NgScrollbarExt extends NgScrollbarCore implements OnDestroy {\r\n\r\n  private readonly renderer: Renderer2 = inject(Renderer2);\r\n\r\n  private readonly appRef: ApplicationRef = inject(ApplicationRef);\r\n\r\n  _scrollbarsRef: ComponentRef<Scrollbars>;\r\n\r\n  _scrollbars: WritableSignal<Scrollbars> = signal<Scrollbars>(null);\r\n\r\n  /**\r\n   * Selector used to query the viewport element.\r\n   */\r\n  externalViewport: InputSignal<string> = input<string>();\r\n\r\n  /**\r\n   * Selector used to query the content wrapper element.\r\n   */\r\n  externalContentWrapper: InputSignal<string> = input<string>();\r\n\r\n  /**\r\n   * Selector used to query the spacer element (virtual scroll integration).\r\n   * In the case of integrating the scrollbar with a virtual scroll component,\r\n   * a spacer element is typically created to match the real size of the content.\r\n   * The scrollbar will use the size of this spacer element for calculations instead of the content wrapper size.\r\n   */\r\n  externalSpacer: InputSignal<string> = input<string>();\r\n\r\n  viewportElement: WritableSignal<HTMLElement> = linkedSignal({\r\n    source: this.externalViewport,\r\n    // If viewport selector was defined, query the element\r\n    computation: (selector: string) => this.getElement(selector) || this.customViewport()?.nativeElement\r\n  });\r\n\r\n  viewportError: Signal<string> = computed(() => {\r\n    return !this.viewportElement()\r\n      ? `[NgScrollbar]: Could not find the viewport element for the provided selector \"${ this.externalViewport() }\"`\r\n      : null;\r\n  });\r\n\r\n  contentWrapperElement: WritableSignal<HTMLElement> = linkedSignal({\r\n    source: this.externalContentWrapper,\r\n    computation: (selector: string) => this.getElement(selector)\r\n  });\r\n\r\n  contentWrapperError: Signal<string> = computed(() => {\r\n    return !this.contentWrapperElement() && this.externalContentWrapper()\r\n      ? `[NgScrollbar]: Content wrapper element not found for the provided selector \"${ this.externalContentWrapper() }\"`\r\n      : null;\r\n  });\r\n\r\n  spacerElement: WritableSignal<HTMLElement> = linkedSignal({\r\n    source: this.externalSpacer,\r\n    computation: (selector: string) => this.getElement(selector)\r\n  });\r\n\r\n  spacerError: Signal<string> = computed(() => {\r\n    return !this.spacerElement() && this.externalSpacer()\r\n      ? `[NgScrollbar]: Spacer element not found for the provided selector \"${ this.externalSpacer() }\"`\r\n      : null;\r\n  });\r\n\r\n  /**\r\n   * Skip initializing the viewport and the scrollbar\r\n   * this is used when the component needs to wait for 3rd party library to render\r\n   */\r\n  skipInit: boolean;\r\n\r\n  /**\r\n   * Reference to the external viewport directive if used\r\n   */\r\n  customViewport: Signal<ScrollViewport> = contentChild(ScrollViewport, { descendants: true });\r\n\r\n  constructor() {\r\n    // Using `afterRenderEffect` would run twice, one when viewport directive is detected\r\n    // and one when content wrapper is detected, therefore `effect` is better because it runs only once.\r\n    effect(() => {\r\n      const viewportElement: HTMLElement = this.viewportElement();\r\n      const contentWrapperElement: HTMLElement = this.contentWrapperElement();\r\n      const spacerElement: HTMLElement = this.spacerElement();\r\n\r\n      const viewportError: string = this.viewportError();\r\n      const contentWrapperError: string = this.contentWrapperError();\r\n      const spacerError: string = this.spacerError();\r\n\r\n      untracked(() => {\r\n        if (!this.skipInit) {\r\n          const error: string = viewportError || contentWrapperError || spacerError;\r\n          if (error) {\r\n            console.error(error);\r\n          } else {\r\n            this.initialize(viewportElement, contentWrapperElement, spacerElement);\r\n          }\r\n        }\r\n      });\r\n    });\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._scrollbarsRef) {\r\n      this.appRef.detachView(this._scrollbarsRef.hostView);\r\n      this._scrollbarsRef.destroy();\r\n    }\r\n  }\r\n\r\n  initialize(viewportElement: HTMLElement, contentWrapperElement: HTMLElement, spacerElement: HTMLElement): void {\r\n    if (this.skipInit) {\r\n      // If initialized via async detection, then we should set the signals\r\n      this.viewportElement.set(viewportElement);\r\n      this.contentWrapperElement.set(contentWrapperElement);\r\n      this.spacerElement.set(spacerElement);\r\n    }\r\n\r\n    // If no external spacer and no content wrapper are provided, create a content wrapper element\r\n    if (!spacerElement && !contentWrapperElement) {\r\n      contentWrapperElement = this.renderer.createElement('div');\r\n\r\n      // Move all content of the viewport into the content wrapper\r\n      const childNodes: ChildNode[] = Array.from(viewportElement.childNodes);\r\n      childNodes.forEach((node: ChildNode) => this.renderer.appendChild(contentWrapperElement, node));\r\n\r\n      // Append the content wrapper to the viewport\r\n      this.renderer.appendChild(viewportElement, contentWrapperElement);\r\n    }\r\n\r\n    // Make sure content wrapper element is defined to proceed\r\n    if (contentWrapperElement) {\r\n      // Initialize viewport\r\n      this.viewport.init(viewportElement, contentWrapperElement, spacerElement);\r\n      // Attach scrollbars\r\n      this._attachScrollbars();\r\n    }\r\n  }\r\n\r\n  _attachScrollbars(): void {\r\n    // Create the scrollbars component\r\n    this._scrollbarsRef = createComponent(Scrollbars, {\r\n      environmentInjector: this.appRef.injector,\r\n      elementInjector: Injector.create({ providers: [{ provide: NG_SCROLLBAR, useValue: this }] })\r\n    });\r\n    // Attach scrollbar to the content wrapper\r\n    this.renderer.appendChild(this.viewport.contentWrapperElement, this._scrollbarsRef.location.nativeElement)\r\n    // Attach the host view of the component to the main change detection tree, so that its lifecycle hooks run.\r\n    this.appRef.attachView(this._scrollbarsRef.hostView);\r\n    // Set the scrollbars instance\r\n    this._scrollbars.set(this._scrollbarsRef.instance);\r\n  }\r\n\r\n  private getElement(selector: string): HTMLElement {\r\n    return selector ? this.nativeElement.querySelector(selector) as HTMLElement : null;\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  inject,\r\n  effect,\r\n  untracked,\r\n  input,\r\n  NgZone,\r\n  InputSignal,\r\n  EffectCleanupRegisterFn\r\n} from '@angular/core';\r\nimport { ContentObserver } from '@angular/cdk/observers';\r\nimport { Subscription, throttleTime } from 'rxjs';\r\nimport { NgScrollbarExt } from './ng-scrollbar-ext';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: 'ng-scrollbar[externalViewport][asyncDetection]'\r\n})\r\nexport class AsyncDetection {\r\n\r\n  private readonly scrollbar: NgScrollbarExt = inject(NgScrollbarExt, { self: true });\r\n  private readonly zone: NgZone = inject(NgZone);\r\n\r\n  private readonly contentObserver: ContentObserver = inject(ContentObserver);\r\n\r\n  asyncDetection: InputSignal<'auto' | ''> = input<'auto' | ''>();\r\n\r\n  constructor() {\r\n    this.scrollbar.skipInit = true;\r\n    let sub$: Subscription;\r\n\r\n    effect((onCleanup: EffectCleanupRegisterFn) => {\r\n      const init: boolean = this.scrollbar.viewport.initialized();\r\n      const externalViewport: string = this.scrollbar.externalViewport();\r\n      const externalContentWrapper: string = this.scrollbar.externalContentWrapper();\r\n      const externalSpacer: string = this.scrollbar.externalSpacer();\r\n      const asyncDetection: 'auto' | '' = this.asyncDetection();\r\n\r\n      untracked(() => {\r\n        let viewportElement: HTMLElement;\r\n        let contentWrapperElement: HTMLElement;\r\n\r\n        this.zone.runOutsideAngular(() => {\r\n          // The content observer should not be throttled using the same function we use for ResizeObserver,\r\n          // It should detect the content change asap to attach the scrollbar\r\n          sub$ = this.contentObserver.observe(this.scrollbar.nativeElement).pipe(\r\n            throttleTime(100, null, {\r\n              leading: true,\r\n              trailing: true\r\n            })\r\n          ).subscribe(() => {\r\n            // Search for external viewport\r\n            viewportElement = this.scrollbar.nativeElement.querySelector(externalViewport);\r\n\r\n            // Search for external content wrapper\r\n            contentWrapperElement = this.scrollbar.nativeElement.querySelector(externalContentWrapper);\r\n\r\n            this.zone.run(() => {\r\n              if (!init && viewportElement && contentWrapperElement) {\r\n                // If an external spacer selector is provided, search for it\r\n                let spacerElement: HTMLElement;\r\n                if (externalSpacer) {\r\n                  spacerElement = this.scrollbar.nativeElement.querySelector(externalSpacer);\r\n                }\r\n                this.scrollbar.initialize(viewportElement, contentWrapperElement, spacerElement);\r\n              } else if (!viewportElement || !contentWrapperElement) {\r\n                this.scrollbar.viewport.reset();\r\n              }\r\n            });\r\n\r\n            if (asyncDetection !== 'auto') {\r\n              sub$.unsubscribe();\r\n            }\r\n          });\r\n        });\r\n\r\n        onCleanup(() => sub$?.unsubscribe());\r\n      });\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  inject,\r\n  signal,\r\n  effect,\r\n  untracked,\r\n  NgZone,\r\n  WritableSignal,\r\n  EffectCleanupRegisterFn\r\n} from '@angular/core';\r\nimport { SharedResizeObserver } from '@angular/cdk/observers/private';\r\nimport { Subscription, map } from 'rxjs';\r\nimport { NgScrollbarExt } from './ng-scrollbar-ext';\r\nimport { filterResizeEntries } from './ng-scrollbar.model';\r\nimport { ElementDimension, getThrottledStream } from './utils/common';\r\n\r\n@Directive({\r\n  standalone: true,\r\n  selector: 'ng-scrollbar[externalViewport][syncSpacer]',\r\n  host: {\r\n    '[style.--spacer-width]': 'spacerDimension().width',\r\n    '[style.--spacer-height]': 'spacerDimension().height'\r\n  }\r\n})\r\nexport class SyncSpacer {\r\n\r\n  private readonly sharedResizeObserver: SharedResizeObserver = inject(SharedResizeObserver);\r\n\r\n  private readonly scrollbar: NgScrollbarExt = inject(NgScrollbarExt, { self: true });\r\n\r\n  private readonly zone: NgZone = inject(NgZone);\r\n\r\n  /**\r\n   * A signal used to sync spacer dimension when content dimension changes\r\n   */\r\n  spacerDimension: WritableSignal<ElementDimension> = signal<ElementDimension>({});\r\n\r\n  constructor() {\r\n    let sub$: Subscription;\r\n\r\n    effect((onCleanup: EffectCleanupRegisterFn) => {\r\n      const spacerElement: HTMLElement = this.scrollbar.spacerElement();\r\n      const contentWrapperElement: HTMLElement = this.scrollbar.contentWrapperElement();\r\n      const throttleDuration: number = this.scrollbar.sensorThrottleTime();\r\n      const disableSensor: boolean = this.scrollbar.disableSensor();\r\n\r\n      untracked(() => {\r\n        if (!disableSensor && contentWrapperElement && spacerElement) {\r\n          // Sync spacer dimension with content wrapper dimensions to allow both scrollbars to be displayed\r\n          this.zone.runOutsideAngular(() => {\r\n            sub$ = getThrottledStream(this.sharedResizeObserver.observe(contentWrapperElement), throttleDuration).pipe(\r\n              map((entries: ResizeObserverEntry[]) => filterResizeEntries(entries, contentWrapperElement)),\r\n            ).subscribe(() => {\r\n              this.zone.run(() => {\r\n                // Use animation frame to avoid \"ResizeObserver loop completed with undelivered notifications.\" error\r\n                requestAnimationFrame(() => {\r\n                  this.spacerDimension.set({\r\n                    width: contentWrapperElement.offsetWidth,\r\n                    height: contentWrapperElement.offsetHeight\r\n                  });\r\n                });\r\n              });\r\n            });\r\n          });\r\n        }\r\n        onCleanup(() => sub$?.unsubscribe());\r\n      });\r\n    });\r\n  }\r\n}\r\n","import { Provider, EnvironmentProviders, NgModule, makeEnvironmentProviders } from '@angular/core';\r\nimport { NgScrollbar } from './ng-scrollbar';\r\nimport { ScrollViewport } from './viewport';\r\nimport { NgScrollbarExt } from './ng-scrollbar-ext';\r\nimport { NG_SCROLLBAR_OPTIONS, NG_SCROLLBAR_POLYFILL, NgScrollbarOptions } from './ng-scrollbar.model';\r\nimport { AsyncDetection } from './async-detection';\r\nimport { defaultOptions } from './ng-scrollbar.default';\r\nimport { SyncSpacer } from './sync-spacer';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgScrollbar,\r\n    ScrollViewport,\r\n    NgScrollbarExt,\r\n    AsyncDetection,\r\n    SyncSpacer\r\n  ],\r\n  exports: [\r\n    NgScrollbar,\r\n    ScrollViewport,\r\n    NgScrollbarExt,\r\n    AsyncDetection,\r\n    SyncSpacer\r\n  ]\r\n})\r\nexport class NgScrollbarModule {\r\n}\r\n\r\nexport function provideScrollbarOptions(options: NgScrollbarOptions): Provider[] {\r\n  return [\r\n    {\r\n      provide: NG_SCROLLBAR_OPTIONS,\r\n      useValue: { ...defaultOptions, ...options }\r\n    }\r\n  ]\r\n}\r\n\r\nexport function provideScrollbarPolyfill(url: string): EnvironmentProviders {\r\n  return makeEnvironmentProviders([\r\n    {\r\n      provide: NG_SCROLLBAR_POLYFILL,\r\n      useValue: url\r\n    }\r\n  ]);\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;;;;MAMa,cAAc,CAAA;AAJ3B,IAAA,WAAA,GAAA;QAMW,IAAa,CAAA,aAAA,GAAgB,MAAM,EAAC,UAAuB,EAAC,CAAC,aAAa;AAEpF;8GAJY,cAAc,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAd,cAAc,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAAd,cAAc,EAAA,UAAA,EAAA,CAAA;kBAJ1B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,QAAQ,EAAE;AACX,iBAAA;;;ACHK,SAAU,gBAAgB,CAAC,GAAa,EAAA;AAC5C,IAAA,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,aAAa,GAAG,MAAM,KAAK,CAAC;AACnD;AAEM,SAAU,eAAe,CAAC,GAAa,EAAA;IAC3C,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC;AAC5C;SAEgB,eAAe,GAAA;AAC7B,IAAA,OAAO,GAAG,CAAC,CAAC,CAAe,KAAI;;;QAG7B,CAAC,CAAC,cAAc,EAAE;QAClB,CAAC,CAAC,eAAe,EAAE;AACrB,KAAC,CAAC;AACJ;AAEgB,SAAA,kBAAkB,CAAI,MAAqB,EAAE,QAAgB,EAAA;IAC3E,OAAO,MAAM,CAAC,IAAI,CAChB,YAAY,CAAC,QAAQ,IAAI,CAAC,EAAE,IAAI,EAAE;AAChC,QAAA,OAAO,EAAE,KAAK;AACd,QAAA,QAAQ,EAAE;AACX,KAAA,CAAC,CACH;AACH;AASA,IAAY,eAIX;AAJD,CAAA,UAAY,eAAe,EAAA;AACzB,IAAA,eAAA,CAAA,UAAA,CAAA,GAAA,oBAA+B;AAC/B,IAAA,eAAA,CAAA,SAAA,CAAA,GAAA,mBAA6B;AAC7B,IAAA,eAAA,CAAA,QAAA,CAAA,GAAA,kBAA2B;AAC7B,CAAC,EAJW,eAAe,KAAf,eAAe,GAI1B,EAAA,CAAA,CAAA;;ACpCD;;;AAGG;MAEU,eAAe,CAAA;AAD5B,IAAA,WAAA,GAAA;AAaE;;AAEG;AACH,QAAA,IAAA,CAAA,WAAW,GAA4B,MAAM,CAAC,KAAK,CAAC;AAqFrD;;AAlFC,IAAA,IAAI,YAAY,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY;;;AAIxC,IAAA,IAAI,WAAW,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW;;;AAIvC,IAAA,IAAI,SAAS,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS;;;AAIrC,IAAA,IAAI,UAAU,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU;;;AAItC,IAAA,IAAI,aAAa,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,qBAAqB,CAAC,YAAY;;;AAIhD,IAAA,IAAI,YAAY,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW;;;AAI/C,IAAA,IAAI,UAAU,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW;;;AAI7C,IAAA,IAAI,UAAU,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY;;AAG/C;;AAEG;AACH,IAAA,IAAI,CAAC,eAA4B,EAAE,cAA2B,EAAE,aAA2B,EAAA;;QAEzF,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC;AACvD,QAAA,IAAI,CAAC,aAAa,GAAG,eAAe;;QAGpC,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC;;;;QAKrD,IAAI,aAAa,EAAE;YACjB,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC;AACnD,YAAA,IAAI,CAAC,qBAAqB,GAAG,aAAa;;aACrC;;AAEL,YAAA,IAAI,CAAC,qBAAqB,GAAG,cAAc;;AAE7C,QAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC;;IAG5B,KAAK,GAAA;AACH,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI;AACzB,QAAA,IAAI,CAAC,qBAAqB,GAAG,IAAI;AACjC,QAAA,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC;;AAG7B;;AAEG;AACH,IAAA,SAAS,CAAC,KAAa,EAAA;AACrB,QAAA,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,KAAK;;AAGtC;;AAEG;AACH,IAAA,SAAS,CAAC,KAAa,EAAA;AACrB,QAAA,IAAI,CAAC,aAAa,CAAC,UAAU,GAAG,KAAK;;8GAlG5B,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;kHAAf,eAAe,EAAA,CAAA,CAAA;;2FAAf,eAAe,EAAA,UAAA,EAAA,CAAA;kBAD3B;;;ACAD;;;AAGG;MACU,YAAY,GAAiC,IAAI,cAAc,CAAe,cAAc;;ACTlG,MAAM,cAAc,GAAuB;AAChD,IAAA,UAAU,EAAE,EAAE;AACd,IAAA,UAAU,EAAE,EAAE;AACd,IAAA,WAAW,EAAE,EAAE;AACf,IAAA,WAAW,EAAE,MAAM;AACnB,IAAA,UAAU,EAAE,QAAQ;AACpB,IAAA,UAAU,EAAE,QAAQ;AACpB,IAAA,QAAQ,EAAE,QAAQ;AAClB,IAAA,mBAAmB,EAAE,EAAE;AACvB,IAAA,kBAAkB,EAAE,CAAC;AACrB,IAAA,aAAa,EAAE,KAAK;AACpB,IAAA,kBAAkB,EAAE,KAAK;AACzB,IAAA,OAAO,EAAE,KAAK;AACd,IAAA,WAAW,EAAE;CACd;AAED;AACO,MAAM,6BAA6B,GAAW,mJAAmJ;;ICX5L;AAAZ,CAAA,UAAY,qBAAqB,EAAA;AAC/B,IAAA,qBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;AACvB,IAAA,qBAAA,CAAA,SAAA,CAAA,GAAA,gBAA0B;AAC5B,CAAC,EAHW,qBAAqB,KAArB,qBAAqB,GAGhC,EAAA,CAAA,CAAA;MAEY,oBAAoB,GAAuC,IAAI,cAAc,CAAqB,sBAAsB,EAAE;AACrI,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,OAAO,EAAE,MAAM;AAChB,CAAA;MAEY,qBAAqB,GAA2B,IAAI,cAAc,CAAS,uBAAuB,EAAE;AAC/G,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,OAAO,EAAE,MAAM;AAChB,CAAA;AA0De,SAAA,mBAAmB,CAAC,OAA8B,EAAE,MAAe,EAAA;IACjF,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,KAA0B,KAAK,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW;AAChG;;MCLsB,eAAe,CAAA;AA4JnC,IAAA,WAAA,GAAA;;AAzJiB,QAAA,IAAA,CAAA,OAAO,GAAuB,MAAM,CAAC,oBAAoB,CAAC;AAE1D,QAAA,IAAA,CAAA,oBAAoB,GAAyB,MAAM,CAAC,oBAAoB,CAAC;AAEzE,QAAA,IAAA,CAAA,IAAI,GAAW,MAAM,CAAC,MAAM,CAAC;AAE7B,QAAA,IAAA,CAAA,QAAQ,GAAa,MAAM,CAAC,QAAQ,CAAC;;AAG7C,QAAA,IAAA,CAAA,QAAQ,GAAY,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO;AAE9D,QAAA,IAAA,CAAA,GAAG,GAAmB,MAAM,CAAC,cAAc,CAAC;AAE5C,QAAA,IAAA,CAAA,YAAY,GAAwB,MAAM,CAAC,mBAAmB,CAAC;;QAG/D,IAAQ,CAAA,QAAA,GAAoB,MAAM,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAEnE,IAAa,CAAA,aAAA,GAAgB,MAAM,EAAC,UAAuB,EAAC,CAAC,aAAa;AAEnF;;AAEG;AACH,QAAA,IAAA,CAAA,SAAS,GAAsB,QAAQ,CAAuB,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;AAEhH;;AAEG;AACH,QAAA,IAAA,CAAA,QAAQ,GAAsC,MAAM,CAAC,MAAM,CAAC;AAE5D;;;;;;AAMG;QACH,IAAW,CAAA,WAAA,GAAsC,KAAK,CAAuB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;AAEtG;;;;;;AAMG;QACH,IAAU,CAAA,UAAA,GAAqC,KAAK,CAAsB,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;;QAGlG,IAAO,CAAA,OAAA,GAAwD,KAAK,CAA4B,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;AACpH,YAAA,SAAS,EAAE;AACZ,SAAA,CAAC;;QAGF,IAAkB,CAAA,kBAAA,GAAwD,KAAK,CAA4B,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;AAC1I,YAAA,SAAS,EAAE;AACZ,SAAA,CAAC;;QAGF,IAAa,CAAA,aAAA,GAAwD,KAAK,CAA4B,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;AAChI,YAAA,SAAS,EAAE;AACZ,SAAA,CAAC;;QAGF,IAAkB,CAAA,kBAAA,GAAsD,KAAK,CAA0B,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;AACtI,YAAA,SAAS,EAAE;AACZ,SAAA,CAAC;;QAGF,IAAW,CAAA,WAAA,GAAwD,KAAK,CAA4B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;AAC5H,YAAA,SAAS,EAAE;AACZ,SAAA,CAAC;;AAGF,QAAA,IAAA,CAAA,iBAAiB,GAAqC,MAAM,CAAmB,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;;AAGvG,QAAA,IAAA,CAAA,gBAAgB,GAAqC,MAAM,CAAmB,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC;AAE9F,QAAA,IAAA,CAAA,KAAK,GAA0B,QAAQ,CAAC,MAAK;YACnD,IAAI,YAAY,GAAY,KAAK;YACjC,IAAI,cAAc,GAAY,KAAK;YACnC,IAAI,sBAAsB,GAAY,KAAK;YAC3C,IAAI,wBAAwB,GAAY,KAAK;AAE7C,YAAA,MAAM,WAAW,GAAyB,IAAI,CAAC,WAAW,EAAE;AAC5D,YAAA,MAAM,UAAU,GAAwB,IAAI,CAAC,UAAU,EAAE;AAEzD,YAAA,MAAM,kBAAkB,GAAqB,IAAI,CAAC,iBAAiB,EAAE;AACrE,YAAA,MAAM,iBAAiB,GAAqB,IAAI,CAAC,gBAAgB,EAAE;;YAGnE,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,UAAU,EAAE;gBACxD,sBAAsB,GAAG,iBAAiB,CAAC,MAAM,GAAG,kBAAkB,CAAC,MAAM;AAC7E,gBAAA,YAAY,GAAG,UAAU,KAAK,SAAS,IAAI,sBAAsB;;;YAGnE,IAAI,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,YAAY,EAAE;gBAC1D,wBAAwB,GAAG,iBAAiB,CAAC,KAAK,GAAG,kBAAkB,CAAC,KAAK;AAC7E,gBAAA,cAAc,GAAG,UAAU,KAAK,SAAS,IAAI,wBAAwB;;YAGvE,OAAO;gBACL,YAAY;gBACZ,cAAc;gBACd,sBAAsB;gBACtB,wBAAwB;aACzB;AACH,SAAC,CAAC;AAEF,QAAA,IAAA,CAAA,sBAAsB,GAAoB,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,sBAAsB,CAAC;AAC7F,QAAA,IAAA,CAAA,wBAAwB,GAAoB,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,wBAAwB,CAAC;AACjG,QAAA,IAAA,CAAA,YAAY,GAAoB,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,YAAY,CAAC;AACzE,QAAA,IAAA,CAAA,cAAc,GAAoB,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,cAAc,CAAC;;QAG7E,IAAmB,CAAA,mBAAA,GAAsD,KAAK,CAA0B,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE;AACxI,YAAA,SAAS,EAAE;AACZ,SAAA,CAAC;AAEF;;;;;AAKG;QACH,IAAU,CAAA,UAAA,GAAqC,KAAK,CAAsB,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;AAClG;;;;;;;AAOG;QACH,IAAQ,CAAA,QAAA,GAAmC,KAAK,CAAoB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;;QAG1F,IAAU,CAAA,UAAA,GAAwB,KAAK,CAAS,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;;QAExE,IAAU,CAAA,UAAA,GAAwB,KAAK,CAAS,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;;QAExE,IAAW,CAAA,WAAA,GAAwB,KAAK,CAAS,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;;QAGzE,IAAS,CAAA,SAAA,GAA2B,MAAM,EAAQ;;QAGlD,IAAW,CAAA,WAAA,GAA2B,MAAM,EAAQ;AAMlD,QAAA,IAAI,UAAwB;AAC5B,QAAA,IAAI,cAAuB;AAE3B,QAAA,iBAAiB,CAAC;AAChB,YAAA,SAAS,EAAE,CAAC,SAAkC,KAAU;AACtD,gBAAA,MAAM,aAAa,GAAY,IAAI,CAAC,aAAa,EAAE;AACnD,gBAAA,MAAM,gBAAgB,GAAW,IAAI,CAAC,kBAAkB,EAAE;gBAC1D,MAAM,YAAY,GAAY,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;gBAEzD,SAAS,CAAC,MAAK;oBACb,IAAI,YAAY,EAAE;;wBAEhB,IAAI,aAAa,EAAE;AACjB,4BAAA,qBAAqB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;;6BACpE;;AAEL,4BAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAK;AAC/B,gCAAA,UAAU,GAAG,kBAAkB,CAC7B,aAAa,CAAC;oCACZ,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;oCAC9D,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB;AACtE,iCAAA,CAAC,EACF,gBAAgB,CACjB,CAAC,SAAS,CAAC,MAAK;;;AAGf,oCAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAK;wCACjB,IAAI,CAAC,gBAAgB,EAAE;wCAEvB,IAAI,cAAc,EAAE;AAClB,4CAAA,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;;6CAClB;AACL,4CAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;;wCAEvB,cAAc,GAAG,IAAI;AACvB,qCAAC,CAAC;AACJ,iCAAC,CAAC;AACJ,6BAAC,CAAC;;;oBAIN,SAAS,CAAC,MAAM,UAAU,EAAE,WAAW,EAAE,CAAC;AAC5C,iBAAC,CAAC;;AAEL,SAAA,CAAC;;AAGJ;;AAEG;AACH,IAAA,MAAM,CAAC,MAA8B,EAAA;QACnC,IAAI,CAAC,gBAAgB,EAAE;AAEvB,QAAA,IAAI,MAAM,KAAK,qBAAqB,CAAC,SAAS,EAAE;AAC9C,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;;aAChB;AACL,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE;;;AAI3B;;AAEG;AACH,IAAA,QAAQ,CAAC,OAA8B,EAAA;AACrC,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC;;AAGzE;;AAEG;IACH,eAAe,CAAC,MAA2B,EAAE,OAAsC,EAAA;AACjF,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC;;IAGhF,gBAAgB,GAAA;QACtB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QACpG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;;8GAzOnF,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAf,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,eAAe,EAJxB,YAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,WAAA,EAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,UAAA,EAAA,aAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,OAAA,EAAA,EAAA,iBAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,aAAA,EAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,UAAA,EAAA,eAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,UAAA,EAAA,oBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,UAAA,EAAA,aAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,mBAAA,EAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,UAAA,EAAA,qBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,QAAA,EAAA,EAAA,iBAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,WAAA,EAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,UAAA,EAAA,aAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,oBAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,qBAAA,EAAA,kBAAA,EAAA,6BAAA,EAAA,0BAAA,EAAA,+BAAA,EAAA,4BAAA,EAAA,aAAA,EAAA,UAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA,YAAA,EAAA,eAAA,EAAA,YAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,yBAAA,EAAA,sBAAA,EAAA,wBAAA,EAAA,2BAAA,EAAA,uBAAA,EAAA,0BAAA,EAAA,yBAAA,EAAA,4BAAA,EAAA,wBAAA,EAAA,2BAAA,EAAA,EAAA,EAAA,SAAA,EAAA;AACT,YAAA,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe;AACtD,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAEmB,eAAe,EAAA,UAAA,EAAA,CAAA;kBAxBpC,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,IAAI,EAAE;AACJ,wBAAA,sBAAsB,EAAE,MAAM;AAC9B,wBAAA,qBAAqB,EAAE,gBAAgB;AACvC,wBAAA,uBAAuB,EAAE,kBAAkB;AAC3C,wBAAA,+BAA+B,EAAE,0BAA0B;AAC3D,wBAAA,iCAAiC,EAAE,4BAA4B;AAC/D,wBAAA,eAAe,EAAE,UAAU;AAC3B,wBAAA,YAAY,EAAE,aAAa;AAC3B,wBAAA,iBAAiB,EAAE,YAAY;AAC/B,wBAAA,iBAAiB,EAAE,YAAY;AAC/B,wBAAA,mBAAmB,EAAE,cAAc;AACnC,wBAAA,mBAAmB,EAAE,cAAc;AACnC,wBAAA,oBAAoB,EAAE,eAAe;AACrC,wBAAA,2BAA2B,EAAE,sBAAsB;AACnD,wBAAA,0BAA0B,EAAE,2BAA2B;AACvD,wBAAA,yBAAyB,EAAE,0BAA0B;AACrD,wBAAA,2BAA2B,EAAE,4BAA4B;AACzD,wBAAA,0BAA0B,EAAE;AAC7B,qBAAA;AACD,oBAAA,SAAS,EAAE;AACT,wBAAA,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,iBAAiB;AACtD;AACF,iBAAA;;;ACvEM,MAAM,iBAAiB,GAAqC,IAAI,cAAc,CAAmB,mBAAmB,CAAC;MAGtG,gBAAgB,CAAA;AADtC,IAAA,WAAA,GAAA;AAGE,QAAA,IAAA,CAAA,SAAS,GAA2B,MAAM,CAAC,CAAC,CAAC;;AAwBpC,QAAA,IAAA,CAAA,GAAG,GAAiB,MAAM,CAAC,YAAY,CAAC;AAKlD;8GA/BqB,gBAAgB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAhB,gBAAgB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAAhB,gBAAgB,EAAA,UAAA,EAAA,CAAA;kBADrC;;;MCCqB,oBAAoB,CAAA;AAsBxC,IAAA,WAAA,GAAA;;AAnBmB,QAAA,IAAA,CAAA,GAAG,GAAiB,MAAM,CAAC,YAAY,CAAC;;AAGxC,QAAA,IAAA,CAAA,OAAO,GAAqB,MAAM,CAAC,iBAAiB,CAAC;;AAGrD,QAAA,IAAA,CAAA,QAAQ,GAAa,MAAM,CAAC,QAAQ,CAAC;;AAGrC,QAAA,IAAA,CAAA,IAAI,GAAW,MAAM,CAAC,MAAM,CAAC;;QAGvC,IAAa,CAAA,aAAA,GAAgB,MAAM,EAAC,UAAuB,EAAC,CAAC,aAAa;AAQjF,QAAA,MAAM,CAAC,CAAC,SAAkC,KAAI;YAC5C,MAAM,kBAAkB,GAAY,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE;YAEjE,SAAS,CAAC,MAAK;gBACb,IAAI,CAAC,kBAAkB,EAAE;AACvB,oBAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAK;wBAC/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE;AACzD,qBAAC,CAAC;;gBAGJ,SAAS,CAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,WAAW,EAAE,CAAC;AACxD,aAAC,CAAC;AACJ,SAAC,CAAC;;8GAnCgB,oBAAoB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAApB,oBAAoB,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAApB,oBAAoB,EAAA,UAAA,EAAA,CAAA;kBADzC;;;ACYK,MAAgB,YAAa,SAAQ,oBAAoB,CAAA;;AAe7D,IAAA,IAAc,YAAY,GAAA;AACxB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;;;AAIrD,IAAA,IAAc,UAAU,GAAA;AACtB,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE;;;AAanD,IAAA,IAAI,MAAM,GAAA;QACR,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;;;AAIzD,IAAA,IAAI,IAAI,GAAA;;;QAGN,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;;;AAItD,IAAA,IAAI,aAAa,GAAA;;QAEf,MAAM,YAAY,GAA6B,SAAS,CAAe,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,IAAI,CAC5G,eAAe,EAAE,EACjB,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAChC;QACD,MAAM,UAAU,GAA6B,SAAS,CAAe,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CACtH,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC/B;AAED,QAAA,MAAM,aAAa,GAAwB,SAAS,CAAe,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI;;AAE3H,QAAA,GAAG,CAAC,CAAC,CAAe,KAAK,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,EACjF,GAAG,CAAC,MAAM,IAAI,CAAC,CAChB;QACD,MAAM,aAAa,GAAwB,SAAS,CAAe,IAAI,CAAC,aAAa,EAAE,YAAY,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAC1H,GAAG,CAAC,MAAM,KAAK,CAAC,CACjB;AAED,QAAA,MAAM,YAAY,GAAwB,KAAK,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;AAGnG,QAAA,MAAM,YAAY,GAA6B,SAAS,CAAe,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAC/H,GAAG,CAAC,CAAC,CAAe,KAAK,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAClF;QAED,OAAO,YAAY,CAAC,IAAI,CACtB,SAAS,CAAC,CAAC,UAAwB,KAAI;;YAErC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,EAAE;AAEpD,YAAA,OAAO,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,IAAI,CAC5C,KAAK,CAAC,GAAG,CAAC,EACV,SAAS,CAAC,MAAK;;gBAEb,OAAO,YAAY,CAAC,IAAI,CACtB,SAAS,CAAC,CAAC,IAAa,KAAI;oBAC1B,MAAM,aAAa,GAA2B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC;AAC7F,oBAAA,MAAM,aAAa,GAAY,IAAI,CAAC,eAAe,KAAK,aAAa;;AAErE,oBAAA,OAAO,CAAC,IAAI,IAAI,aAAa,IAAI,IAAI,CAAC,uBAAuB,EAAE,GAAG,KAAK;iBACxE,CAAC,CACyB;AAC/B,aAAC,CAAC,EACF,SAAS,CAAC,UAAU,CAAC,CACtB;SACF,CAAC,CACH;;AAGH,IAAA,WAAA,GAAA;AACE,QAAA,iBAAiB,CAAC;YAChB,SAAS,EAAE,MAAW;AACpB,gBAAA,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE;AAC5B,gBAAA,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE;gBAE3B,SAAS,CAAC,MAAK;oBACb,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACrC,oBAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;;AAEd,wBAAA,qBAAqB,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEtE,iBAAC,CAAC;;AAEL,SAAA,CAAC;AACF,QAAA,KAAK,EAAE;;AAOT;;AAEG;AACH,IAAA,iBAAiB,CAAC,CAAe,EAAA;;QAE/B,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;QACvD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC;QACtE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB;QAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;;IAG/B,QAAQ,GAAA;;AAEd,QAAA,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EAAE;;AAEtC,YAAA,MAAM,sBAAsB,GAAW,IAAI,CAAC,oBAAoB,EAAE;;AAGlE,YAAA,IAAI,sBAAsB,IAAI,IAAI,CAAC,SAAS,EAAE;gBAC5C,OAAO,IAAI,CAAC,SAAS;;AAEvB,YAAA,OAAO,sBAAsB;;;AAG/B,QAAA,MAAM,uBAAuB,GAAW,IAAI,CAAC,qBAAqB,EAAE;AAEpE,QAAA,IAAI,uBAAuB,IAAI,CAAC,EAAE;AAChC,YAAA,OAAO,CAAC;;AAEV,QAAA,OAAO,uBAAuB;;AAGhC;;;AAGG;IACH,uBAAuB,GAAA;AACrB,QAAA,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,EAAE;AACxC,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CACjC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAC1C,SAAS,CAAC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAChD;;AAGH;;AAEG;AACK,IAAA,SAAS,CAAC,QAAgB,EAAA;AAChC,QAAA,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EAAE;AACtC,YAAA,OAAO,QAAQ,IAAI,IAAI,CAAC,SAAS;;QAEnC,OAAO,QAAQ,IAAI,CAAC;;8GAzKF,YAAY,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAZ,YAAY,EAAA,YAAA,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAAZ,YAAY,EAAA,UAAA,EAAA,CAAA;kBADjC;;;ACRK,MAAO,eAAgB,SAAQ,YAAY,CAAA;AAE/C,IAAA,IAAc,WAAW,GAAA;AACvB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY;;AAOvC,IAAA,WAAA,GAAA;QACE,MAAM,CAAC,MAAK;YACV,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,KAAK,EAAE;AAClC,gBAAA,IAAI,CAAC,eAAe,GAAG,MAAa;AAClC,oBAAA,MAAM,MAAM,GAAW,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB;oBAC/F,OAAO,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW;AAC9C,iBAAC;AACD,gBAAA,IAAI,CAAC,kBAAkB,GAAG,CAAC,QAAgB,KAA4B;AACrE,oBAAA,OAAO,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,SAAS,GAAG,UAAU;AACnE,iBAAC;;iBACI;AACL,gBAAA,IAAI,CAAC,eAAe,GAAG,MAAa;AAClC,oBAAA,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW;AACzE,iBAAC;AACD,gBAAA,IAAI,CAAC,kBAAkB,GAAG,CAAC,QAAgB,KAA4B;AACrE,oBAAA,OAAO,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,SAAS,GAAG,UAAU;AACnE,iBAAC;;AAEL,SAAC,CAAC;AACF,QAAA,KAAK,EAAE;;AAGC,IAAA,QAAQ,CAAC,KAAa,EAAA;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;;IAG3E,oBAAoB,GAAA;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY;;IAGpD,qBAAqB,GAAA;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY;;8GAzCnD,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAf,eAAe,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,SAAA,EAFf,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAEzD,eAAe,EAAA,UAAA,EAAA,CAAA;kBAL3B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,QAAQ,EAAE,mBAAmB;oBAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAiB,eAAA,EAAE;AACpE,iBAAA;;AAmDK,MAAO,eAAgB,SAAQ,YAAY,CAAA;AAE/C,IAAA,IAAc,WAAW,GAAA;AACvB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa;;IAG9B,eAAe,GAAA;AACvB,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW;;AAG/D,IAAA,kBAAkB,CAAC,QAAgB,EAAA;AAC3C,QAAA,OAAO,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,SAAS,GAAG,UAAU;;AAGzD,IAAA,QAAQ,CAAC,GAAW,EAAA;QAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;;IAGzE,oBAAoB,GAAA;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY;;IAGpD,qBAAqB,GAAA;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,YAAY;;8GAvBnD,eAAe,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAf,eAAe,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,SAAA,EAFf,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAEzD,eAAe,EAAA,UAAA,EAAA,CAAA;kBAL3B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,QAAQ,EAAE,mBAAmB;oBAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAiB,eAAA,EAAE;AACpE,iBAAA;;;MCpDY,gBAAgB,CAAA;AAY3B,IAAA,WAAA,GAAA;QAViB,IAAS,CAAA,SAAA,GAAY,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEnE,QAAA,IAAA,CAAA,YAAY,GAAW,MAAM,CAAC,qBAAqB,CAAC;AAEpD,QAAA,IAAA,CAAA,QAAQ,GAAa,MAAM,CAAC,QAAQ,CAAC;AAErC,QAAA,IAAA,CAAA,MAAM,GAAW,IAAI,CAAC,QAAQ,CAAC,WAAW;AAE1C,QAAA,IAAA,CAAA,sBAAsB,GAAuC,MAAM,CAAC,IAAI,CAAC;QAGhF,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAC,EAAE;YACzG,IAAI,CAAC,YAAY,EAAE;;;AAIvB,IAAA,MAAM,YAAY,GAAA;AAChB,QAAA,IAAI;;YAEF,MAAM,MAAM,GAAsB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;AACvE,YAAA,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY;;YAG9B,MAAM,IAAI,OAAO,CAAQ,CAAC,OAAO,EAAE,MAAM,KAAI;AAC3C,gBAAA,MAAM,CAAC,MAAM,GAAG,OAAO;AACvB,gBAAA,MAAM,CAAC,OAAO,GAAG,MAAM;gBACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;AACxC,aAAC,CAAC;;AAGF,YAAA,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE;AACjC,gBAAA,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;;iBACzD;AACL,gBAAA,OAAO,CAAC,KAAK,CAAC,qEAAqE,CAAC;;;QAEtF,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,qDAAqD,EAAE,KAAK,CAAC;;;8GAtCpE,gBAAgB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAhB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,gBAAgB,cADH,MAAM,EAAA,CAAA,CAAA;;2FACnB,gBAAgB,EAAA,UAAA,EAAA,CAAA;kBAD5B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;ACS5B,MAAgB,YAAa,SAAQ,oBAAoB,CAAA;;AAU7D,IAAA,IAAI,IAAI,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;;;AAIlF,IAAA,IAAI,QAAQ,GAAA;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;;AAGpC;;;AAGG;AACH,IAAA,IAAI,aAAa,GAAA;QACf,OAAO,SAAS,CAAe,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,IAAI,CACpE,eAAe,EAAE,EACjB,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC/B,SAAS,CAAC,CAAC,CAAe,KAAI;AAC5B,YAAA,IAAI,aAAqB;AACzB,YAAA,IAAI,cAAsB;AAE1B,YAAA,MAAM,SAAS,GAA6B,EAAE,CAAe,CAAC,CAAC,CAAC,IAAI,CAClE,GAAG,CAAC,MAAK;;AAEP,gBAAA,aAAa,GAAG,IAAI,CAAC,QAAQ;AAC7B,gBAAA,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB;gBAC/C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;aACpC,CAAC,CACH;AAED,YAAA,MAAM,QAAQ,GAA6B,SAAS,CAAe,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;AAExH,YAAA,MAAM,OAAO,GAA6B,SAAS,CAAe,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CACnH,eAAe,EAAE,EACjB,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC9B,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CACpC;YAED,OAAO,SAAS,CAAC,IAAI,CACnB,GAAG,CAAC,CAAC,UAAwB,KAAK,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,EAC1E,SAAS,CAAC,CAAC,WAAmB,KAAK,QAAQ,CAAC,IAAI,CAC9C,GAAG,CAAC,CAAC,SAAuB,KAAK,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;;YAExE,GAAG,CAAC,CAAC,UAAkB,KAAK,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAC3D,GAAG,CAAC,CAAC,mBAA2B,KAAK,cAAc,IAAI,mBAAmB,GAAG,WAAW,CAAC,GAAG,aAAa,CAAC,EAC1G,GAAG,CAAC,CAAC,cAAsB,KAAK,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC,EAC7F,SAAS,CAAC,OAAO,CAAC,CACS,CAAC,CAC/B;SACF,CAAC,CACH;;AAGH,IAAA,WAAA,GAAA;AACE,QAAA,iBAAiB,CAAC;YAChB,SAAS,EAAE,MAAW;gBACpB,MAAM,MAAM,GAAuB,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;gBACxE,SAAS,CAAC,MAAK;AACb,oBAAA,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;wBAC9B,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;;AAEnH,iBAAC,CAAC;;AAEL,SAAA,CAAC;AACF,QAAA,KAAK,EAAE;AAxEU,QAAA,IAAA,CAAA,OAAO,GAAqB,MAAM,CAAC,gBAAgB,CAAC;AAEtD,QAAA,IAAA,CAAA,KAAK,GAAiB,MAAM,CAAC,YAAY,CAAC;;AAyEnD,IAAA,WAAW,CAAC,KAAwB,EAAA;AAC1C,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;8GA9E/B,YAAY,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAZ,YAAY,EAAA,YAAA,EAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAAZ,YAAY,EAAA,UAAA,EAAA,CAAA;kBADjC;;AAmFD,SAAS,aAAa,CAAC,cAAkC,EAAE,OAAoB,EAAE,MAAmB,EAAE,IAAe,EAAA;IACnH,OAAO,OAAO,CAAC,OAAO,CACpB;AACE,QAAA,SAAS,EAAE;YACT,wCAAwC;YACxC;AACD;KACF,EACD;AACE,QAAA,IAAI,EAAE,MAAM;AACZ,QAAA,MAAM,EAAE,QAAQ;QAChB,QAAQ,EAAE,IAAI,cAAc,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE;AAC9C,KAAA,CACF;AACH;;ACtGM,MAAO,eAAgB,SAAQ,YAAY,CAAA;8GAApC,eAAe,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAf,eAAe,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,SAAA,EAFf,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAEzD,eAAe,EAAA,UAAA,EAAA,CAAA;kBAL3B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,QAAQ,EAAE,mBAAmB;oBAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAiB,eAAA,EAAE;AACpE,iBAAA;;AASK,MAAO,eAAgB,SAAQ,YAAY,CAAA;8GAApC,eAAe,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAf,eAAe,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,mBAAA,EAAA,SAAA,EAFf,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAEzD,eAAe,EAAA,UAAA,EAAA,CAAA;kBAL3B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,QAAQ,EAAE,mBAAmB;oBAC7B,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAiB,eAAA,EAAE;AACpE,iBAAA;;;ACMD;AACA,MAAM,aAAa,GAAgD;IACjE,OAAO,EAAE,CAAC,YAAoB,EAAE,SAAiB,KAAc,YAAY,GAAG,SAAS;IACvF,QAAQ,EAAE,CAAC,YAAoB,KAAc,YAAY,GAAG;CAC7D;AAED,MAAM,cAAc,GAAiD;IACnE,OAAO,EAAE,CAAC,QAAgB,EAAE,MAAc,KAAK,MAAM,GAAG,QAAQ;IAChE,QAAQ,EAAE,CAAC,QAAgB,EAAE,MAAc,KAAK,MAAM,GAAG;CAC1D;AAED,MAAM,wBAAwB,GAAwE;AACpG,IAAA,GAAG,EAAE;AACH,QAAA,OAAO,EAAE,CAAC,QAAgB,EAAE,MAAc,EAAE,SAAiB,KAAK,SAAS,GAAG,MAAM,GAAG,QAAQ;AAC/F,QAAA,QAAQ,EAAE,CAAC,QAAgB,EAAE,MAAc,EAAE,SAAiB,KAAK,SAAS,GAAG,MAAM,GAAG;AACzF,KAAA;AACD,IAAA,GAAG,EAAE;CACN;AAQK,MAAO,eAAgB,SAAQ,oBAAoB,CAAA;AAavD,IAAA,IAAI,aAAa,GAAA;QACf,MAAM,YAAY,GAA6B,SAAS,CAAe,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,IAAI,CAC5G,eAAe,EAAE,EACjB,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAChC;QACD,MAAM,UAAU,GAA6B,SAAS,CAAe,IAAI,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CACtH,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC/B;AAED,QAAA,MAAM,aAAa,GAA6B,SAAS,CAAe,IAAI,CAAC,aAAa,EAAE,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;QAG9H,MAAM,iBAAiB,GAA6B,KAAK,CAAC,UAAU,EAAE,aAAa,CAAC;AAEpF,QAAA,OAAO,YAAY,CAAC,IAAI,CACtB,SAAS,CAAC,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CACzC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAChC,SAAS,CAAC,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC,EAC5C,SAAS,CAAC,iBAAiB,CAAC,CAC7B,CAAC,CACH;;AAGH,IAAA,WAAA,GAAA;QACE,MAAM,CAAC,MAAK;AACV,YAAA,MAAM,eAAe,GAA2B,IAAI,CAAC,eAAe,EAAE;YACtE,MAAM,GAAG,GAAc,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE;YAE3C,SAAS,CAAC,MAAK;;AAEb,gBAAA,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,eAAe,CAAC;gBAE/C,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,GAAG,EAAE;;oBAE7B,IAAI,CAAC,QAAQ,GAAG,wBAAwB,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC;;qBACzD;;AAEL,oBAAA,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,eAAe,CAAC;;AAEnD,aAAC,CAAC;AACJ,SAAC,CAAC;AACF,QAAA,KAAK,EAAE;AApDT,QAAA,IAAA,CAAA,eAAe,GAAoD,KAAK,CAAC,QAAQ,EAAE;AACnF,QAAA,IAAA,CAAA,eAAe,GAAwC,KAAK,CAAC,QAAQ,EAAE;QAE/D,IAAoB,CAAA,oBAAA,GAAW,GAAG;QAClC,IAAkB,CAAA,kBAAA,GAAW,GAAG;QAChC,IAAQ,CAAA,QAAA,GAAW,EAAE;QACrB,IAAe,CAAA,eAAA,GAAW,EAAE;;IAiD5B,eAAe,GAAA;QACrB,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;AACrH,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,kBAAkB,CAAC;;IAGtD,iBAAiB,GAAA;AACvB,QAAA,MAAM,SAAS,GAAW,IAAI,CAAC,OAAO,CAAC,iBAAiB;AACxD,QAAA,MAAM,KAAK,GAAW,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,SAAS,CAAC;QACvG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,SAAS,CAAC;;IAGxC,oBAAoB,GAAA;AAC1B,QAAA,OAAO,QAAQ,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC,IAAI,CAC9C,SAAS,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,EAClG,GAAG,CAAC,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC,CACR;;8GAxEpB,eAAe,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAf,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,eAAe,gaC9C5B,oZAOA,EAAA,MAAA,EAAA,CAAA,gxCAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;;2FDuCa,eAAe,EAAA,UAAA,EAAA,CAAA;kBAN3B,SAAS;+BACE,yBAAyB,EAAA,eAAA,EAGlB,uBAAuB,CAAC,MAAM,EAAA,QAAA,EAAA,oZAAA,EAAA,MAAA,EAAA,CAAA,gxCAAA,CAAA,EAAA;;;AEL3C,MAAO,UAAW,SAAQ,gBAAgB,CAAA;AA/BhD,IAAA,WAAA,GAAA;;QAiCW,IAAkB,CAAA,kBAAA,GAAmB,KAAK;QAE1C,IAAgB,CAAA,gBAAA,GAAuB,QAAQ;QAE/C,IAAY,CAAA,YAAA,GAAmC,cAAc;QAE7D,IAAc,CAAA,cAAA,GAA0B,SAAS;QAEjD,IAAc,CAAA,cAAA,GAA0B,SAAS;QAEjD,IAAI,CAAA,IAAA,GAAc,GAAG;AAiB/B;AAfC,IAAA,IAAI,iBAAiB,GAAA;AACnB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU;;AAGrC,IAAA,IAAI,oBAAoB,GAAA;AACtB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS;;IAGpC,QAAQ,CAAC,GAAW,EAAE,QAAgB,EAAA;AACpC,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;;AAGnD,IAAA,eAAe,CAAC,KAAa,EAAA;QAC3B,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;;8GA3BzB,UAAU,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAV,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAU,EARV,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,aAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,oBAAA,EAAA,aAAA,EAAA,EAAA,EAAA,SAAA,EAAA;AACT,YAAA,EAAE,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,UAAU;SACtD,EAvBS,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;AAkBT,EAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA,ujDAAA,EAAA,g0CAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAES,eAAe,EAAA,QAAA,EAAA,mBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,eAAe,EAAA,QAAA,EAAA,mBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,eAAe,EAAA,QAAA,EAAA,yBAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;;2FAShD,UAAU,EAAA,UAAA,EAAA,CAAA;kBA/BtB,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,aAAa,EACb,QAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;AAkBT,EAAA,CAAA,EAAA,OAAA,EAEQ,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,CAAC,EACjD,SAAA,EAAA;AACT,wBAAA,EAAE,OAAO,EAAE,iBAAiB,EAAE,WAAW,YAAY;qBACtD,EACK,IAAA,EAAA;AACJ,wBAAA,sBAAsB,EAAE;qBACzB,EACgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,MAAA,EAAA,CAAA,ujDAAA,EAAA,g0CAAA,CAAA,EAAA;;AAiE3C,MAAO,UAAW,SAAQ,gBAAgB,CAAA;AAmB9C,IAAA,IAAI,iBAAiB,GAAA;AACnB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU;;AAGrC,IAAA,IAAI,oBAAoB,GAAA;;AAEtB,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC;;AAG/C,IAAA,WAAA,GAAA;QACE,MAAM,CAAC,MAAK;YACV,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,KAAK,EAAE;AAClC,gBAAA,IAAI,CAAC,cAAc,GAAG,CAAC,QAAgB,EAAE,SAAiB,KAAa,EAAE,SAAS,GAAG,QAAQ,CAAC;;iBACzF;gBACL,IAAI,CAAC,cAAc,GAAG,CAAC,QAAgB,KAAa,QAAQ;;AAEhE,SAAC,CAAC;AACF,QAAA,KAAK,EAAE;AAlCA,QAAA,IAAA,CAAA,OAAO,GAAqB,MAAM,CAAC,gBAAgB,CAAC;QAEpD,IAAkB,CAAA,kBAAA,GAAmB,MAAM;QAE3C,IAAgB,CAAA,gBAAA,GAAuB,OAAO;QAE9C,IAAY,CAAA,YAAA,GAAmC,aAAa;QAE5D,IAAc,CAAA,cAAA,GAA0B,SAAS;QAEjD,IAAc,CAAA,cAAA,GAA0B,SAAS;QAEjD,IAAI,CAAA,IAAA,GAAc,GAAG;;IAyB9B,QAAQ,CAAC,IAAY,EAAE,QAAgB,EAAA;AACrC,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;;IAGpD,eAAe,CAAC,KAAa,EAAE,SAAkB,EAAA;AAC/C,QAAA,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;;8GA5CzD,UAAU,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAV,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAU,EATV,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,aAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,UAAA,EAAA,iBAAA,EAAA,oBAAA,EAAA,aAAA,EAAA,EAAA,EAAA,SAAA,EAAA;AACT,YAAA,EAAE,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,UAAU;SACtD,EAvBS,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;AAkBT,EAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA,ujDAAA,EAAA,y5DAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAES,eAAe,EAAA,QAAA,EAAA,mBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,eAAe,EAAA,QAAA,EAAA,mBAAA,EAAA,EAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAE,eAAe,EAAA,QAAA,EAAA,yBAAA,EAAA,MAAA,EAAA,CAAA,iBAAA,EAAA,iBAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;;2FAUhD,UAAU,EAAA,UAAA,EAAA,CAAA;kBAhCtB,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,aAAa,EACb,QAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;AAkBT,EAAA,CAAA,EAAA,OAAA,EAEQ,CAAC,eAAe,EAAE,eAAe,EAAE,eAAe,CAAC,EACjD,SAAA,EAAA;AACT,wBAAA,EAAE,OAAO,EAAE,iBAAiB,EAAE,WAAW,YAAY;qBACtD,EACK,IAAA,EAAA;AACJ,wBAAA,YAAY,EAAE,iBAAiB;AAC/B,wBAAA,sBAAsB,EAAE;qBACzB,EACgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EAAA,MAAA,EAAA,CAAA,ujDAAA,EAAA,y5DAAA,CAAA,EAAA;;;MC9EpC,UAAU,CAAA;AAlBvB,IAAA,WAAA,GAAA;AAmBE,QAAA,IAAA,CAAA,GAAG,GAAiB,MAAM,CAAC,YAAY,CAAC;AACzC;8GAFY,UAAU,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAV,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAU,EAdX,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,YAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,CAAA;;;;;;;GAOT,EARS,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA,2BAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EAAA,UAAU,wDAAE,UAAU,EAAA,QAAA,EAAA,aAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;;2FAerB,UAAU,EAAA,UAAA,EAAA,CAAA;kBAlBtB,SAAS;+BACE,YAAY,EAAA,eAAA,EACL,uBAAuB,CAAC,MAAM,EAAA,OAAA,EACtC,CAAC,UAAU,EAAE,UAAU,CAAC,EACvB,QAAA,EAAA,CAAA;;;;;;;AAOT,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,2BAAA,CAAA,EAAA;;;ACQG,MAAO,WAAY,SAAQ,eAAe,CAAA;AAM9C,IAAA,WAAA,GAAA;QACE,MAAM,CAAC,MAAK;YACV,MAAM,cAAc,GAAgB,IAAI,CAAC,cAAc,EAAE,CAAC,aAAa;YACvE,SAAS,CAAC,MAAK;gBACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC;AACxD,aAAC,CAAC;AACJ,SAAC,CAAC;AACF,QAAA,KAAK,EAAE;AAXT,QAAA,IAAA,CAAA,cAAc,GAAoC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AAEtF,QAAA,IAAA,CAAA,WAAW,GAAuB,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC;;8GAJrD,WAAW,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAX,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,WAAW,EALX,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,sCAAA,EAAA,SAAA,EAAA;AACT,YAAA,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE;YACnD;AACD,SAAA,EAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,CAAA,gBAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,YAAA,EAAA,aAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAMoD,UAAU,EAjBrD,WAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,aAAA,CAAA,EAAA,eAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,QAAA,EAAA,CAAA;;;;;AAKT,EAAA,CAAA,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA,klbAAA,CAAA,EAAA,YAAA,EAAA,CAAA,EAAA,IAAA,EAAA,WAAA,EAAA,IAAA,EANS,UAAU,EAAA,QAAA,EAAA,YAAA,EAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;;2FAcT,WAAW,EAAA,UAAA,EAAA,CAAA;kBAjBvB,SAAS;AACE,YAAA,IAAA,EAAA,CAAA,EAAA,QAAA,EAAA,sCAAsC,YACtC,aAAa,EAAA,OAAA,EACd,CAAC,UAAU,CAAC,EACX,QAAA,EAAA,CAAA;;;;;GAKT,EAEgB,eAAA,EAAA,uBAAuB,CAAC,MAAM,EACpC,SAAA,EAAA;AACT,wBAAA,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,aAAa,EAAE;wBACnD;AACD,qBAAA,EAAA,MAAA,EAAA,CAAA,klbAAA,CAAA,EAAA;;;AC0BG,MAAO,cAAe,SAAQ,eAAe,CAAA;AAyEjD,IAAA,WAAA,GAAA;;;QAGE,MAAM,CAAC,MAAK;AACV,YAAA,MAAM,eAAe,GAAgB,IAAI,CAAC,eAAe,EAAE;AAC3D,YAAA,MAAM,qBAAqB,GAAgB,IAAI,CAAC,qBAAqB,EAAE;AACvE,YAAA,MAAM,aAAa,GAAgB,IAAI,CAAC,aAAa,EAAE;AAEvD,YAAA,MAAM,aAAa,GAAW,IAAI,CAAC,aAAa,EAAE;AAClD,YAAA,MAAM,mBAAmB,GAAW,IAAI,CAAC,mBAAmB,EAAE;AAC9D,YAAA,MAAM,WAAW,GAAW,IAAI,CAAC,WAAW,EAAE;YAE9C,SAAS,CAAC,MAAK;AACb,gBAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAClB,oBAAA,MAAM,KAAK,GAAW,aAAa,IAAI,mBAAmB,IAAI,WAAW;oBACzE,IAAI,KAAK,EAAE;AACT,wBAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;;yBACf;wBACL,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,qBAAqB,EAAE,aAAa,CAAC;;;AAG5E,aAAC,CAAC;AACJ,SAAC,CAAC;AACF,QAAA,KAAK,EAAE;AA9FQ,QAAA,IAAA,CAAA,QAAQ,GAAc,MAAM,CAAC,SAAS,CAAC;AAEvC,QAAA,IAAA,CAAA,MAAM,GAAmB,MAAM,CAAC,cAAc,CAAC;AAIhE,QAAA,IAAA,CAAA,WAAW,GAA+B,MAAM,CAAa,IAAI,CAAC;AAElE;;AAEG;QACH,IAAgB,CAAA,gBAAA,GAAwB,KAAK,EAAU;AAEvD;;AAEG;QACH,IAAsB,CAAA,sBAAA,GAAwB,KAAK,EAAU;AAE7D;;;;;AAKG;QACH,IAAc,CAAA,cAAA,GAAwB,KAAK,EAAU;QAErD,IAAe,CAAA,eAAA,GAAgC,YAAY,CAAC;YAC1D,MAAM,EAAE,IAAI,CAAC,gBAAgB;;AAE7B,YAAA,WAAW,EAAE,CAAC,QAAgB,KAAK,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE,EAAE;AACxF,SAAA,CAAC;AAEF,QAAA,IAAA,CAAA,aAAa,GAAmB,QAAQ,CAAC,MAAK;AAC5C,YAAA,OAAO,CAAC,IAAI,CAAC,eAAe;AAC1B,kBAAE,CAAkF,8EAAA,EAAA,IAAI,CAAC,gBAAgB,EAAG,CAAG,CAAA;kBAC7G,IAAI;AACV,SAAC,CAAC;QAEF,IAAqB,CAAA,qBAAA,GAAgC,YAAY,CAAC;YAChE,MAAM,EAAE,IAAI,CAAC,sBAAsB;YACnC,WAAW,EAAE,CAAC,QAAgB,KAAK,IAAI,CAAC,UAAU,CAAC,QAAQ;AAC5D,SAAA,CAAC;AAEF,QAAA,IAAA,CAAA,mBAAmB,GAAmB,QAAQ,CAAC,MAAK;YAClD,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,IAAI,CAAC,sBAAsB;AACjE,kBAAE,CAAgF,4EAAA,EAAA,IAAI,CAAC,sBAAsB,EAAG,CAAG,CAAA;kBACjH,IAAI;AACV,SAAC,CAAC;QAEF,IAAa,CAAA,aAAA,GAAgC,YAAY,CAAC;YACxD,MAAM,EAAE,IAAI,CAAC,cAAc;YAC3B,WAAW,EAAE,CAAC,QAAgB,KAAK,IAAI,CAAC,UAAU,CAAC,QAAQ;AAC5D,SAAA,CAAC;AAEF,QAAA,IAAA,CAAA,WAAW,GAAmB,QAAQ,CAAC,MAAK;YAC1C,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,cAAc;AACjD,kBAAE,CAAuE,mEAAA,EAAA,IAAI,CAAC,cAAc,EAAG,CAAG,CAAA;kBAChG,IAAI;AACV,SAAC,CAAC;AAQF;;AAEG;QACH,IAAc,CAAA,cAAA,GAA2B,YAAY,CAAC,cAAc,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;;IA4B5F,WAAW,GAAA;AACT,QAAA,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;AACpD,YAAA,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;;;AAIjC,IAAA,UAAU,CAAC,eAA4B,EAAE,qBAAkC,EAAE,aAA0B,EAAA;AACrG,QAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;;AAEjB,YAAA,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,eAAe,CAAC;AACzC,YAAA,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,qBAAqB,CAAC;AACrD,YAAA,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC;;;AAIvC,QAAA,IAAI,CAAC,aAAa,IAAI,CAAC,qBAAqB,EAAE;YAC5C,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;;YAG1D,MAAM,UAAU,GAAgB,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;AACtE,YAAA,UAAU,CAAC,OAAO,CAAC,CAAC,IAAe,KAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;;YAG/F,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,eAAe,EAAE,qBAAqB,CAAC;;;QAInE,IAAI,qBAAqB,EAAE;;YAEzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,EAAE,qBAAqB,EAAE,aAAa,CAAC;;YAEzE,IAAI,CAAC,iBAAiB,EAAE;;;IAI5B,iBAAiB,GAAA;;AAEf,QAAA,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC,UAAU,EAAE;AAChD,YAAA,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;YACzC,eAAe,EAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE;AAC5F,SAAA,CAAC;;AAEF,QAAA,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC;;QAE1G,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;;QAEpD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC;;AAG5C,IAAA,UAAU,CAAC,QAAgB,EAAA;AACjC,QAAA,OAAO,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAgB,GAAG,IAAI;;8GAtJzE,cAAc,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAd,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,oBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,IAAA,EAAA,cAAc,EANd,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gCAAA,EAAA,MAAA,EAAA,EAAA,gBAAA,EAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,UAAA,EAAA,kBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,sBAAA,EAAA,EAAA,iBAAA,EAAA,wBAAA,EAAA,UAAA,EAAA,wBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,cAAA,EAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,EAAA,UAAA,EAAA,EAAA,sCAAA,EAAA,MAAA,EAAA,EAAA,EAAA,SAAA,EAAA;AACT,YAAA,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,cAAc,EAAE;AACtD,YAAA,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,WAAW,EAAE;YACtD;SACD,EAyEqD,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,SAAA,EAAA,cAAc,kHAvF1D,eAAe,EAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA,klbAAA,CAAA,EAAA,eAAA,EAAA,EAAA,CAAA,uBAAA,CAAA,MAAA,EAAA,CAAA,CAAA;;2FAgBd,cAAc,EAAA,UAAA,EAAA,CAAA;kBApB1B,SAAS;iCACI,IAAI,EAAA,QAAA,EACN,gCAAgC,EAAA,QAAA,EAChC,aAAa,EAAA,QAAA,EACb,eAAe,EAER,eAAA,EAAA,uBAAuB,CAAC,MAAM,EACzC,IAAA,EAAA;;;;AAIJ,wBAAA,eAAe,EAAE,MAAM;AACvB,wBAAA,wCAAwC,EAAE;qBAC3C,EACU,SAAA,EAAA;AACT,wBAAA,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,gBAAgB,EAAE;AACtD,wBAAA,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,WAAW,EAAE;wBACtD;AACD,qBAAA,EAAA,MAAA,EAAA,CAAA,klbAAA,CAAA,EAAA;;;MC3BU,cAAc,CAAA;AASzB,IAAA,WAAA,GAAA;QAPiB,IAAS,CAAA,SAAA,GAAmB,MAAM,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAClE,QAAA,IAAA,CAAA,IAAI,GAAW,MAAM,CAAC,MAAM,CAAC;AAE7B,QAAA,IAAA,CAAA,eAAe,GAAoB,MAAM,CAAC,eAAe,CAAC;QAE3E,IAAc,CAAA,cAAA,GAA6B,KAAK,EAAe;AAG7D,QAAA,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,IAAI;AAC9B,QAAA,IAAI,IAAkB;AAEtB,QAAA,MAAM,CAAC,CAAC,SAAkC,KAAI;YAC5C,MAAM,IAAI,GAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,EAAE;YAC3D,MAAM,gBAAgB,GAAW,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;YAClE,MAAM,sBAAsB,GAAW,IAAI,CAAC,SAAS,CAAC,sBAAsB,EAAE;YAC9E,MAAM,cAAc,GAAW,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;AAC9D,YAAA,MAAM,cAAc,GAAgB,IAAI,CAAC,cAAc,EAAE;YAEzD,SAAS,CAAC,MAAK;AACb,gBAAA,IAAI,eAA4B;AAChC,gBAAA,IAAI,qBAAkC;AAEtC,gBAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAK;;;oBAG/B,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,IAAI,CACpE,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE;AACtB,wBAAA,OAAO,EAAE,IAAI;AACb,wBAAA,QAAQ,EAAE;AACX,qBAAA,CAAC,CACH,CAAC,SAAS,CAAC,MAAK;;wBAEf,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,gBAAgB,CAAC;;wBAG9E,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,sBAAsB,CAAC;AAE1F,wBAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAK;AACjB,4BAAA,IAAI,CAAC,IAAI,IAAI,eAAe,IAAI,qBAAqB,EAAE;;AAErD,gCAAA,IAAI,aAA0B;gCAC9B,IAAI,cAAc,EAAE;oCAClB,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC;;gCAE5E,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe,EAAE,qBAAqB,EAAE,aAAa,CAAC;;AAC3E,iCAAA,IAAI,CAAC,eAAe,IAAI,CAAC,qBAAqB,EAAE;AACrD,gCAAA,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE;;AAEnC,yBAAC,CAAC;AAEF,wBAAA,IAAI,cAAc,KAAK,MAAM,EAAE;4BAC7B,IAAI,CAAC,WAAW,EAAE;;AAEtB,qBAAC,CAAC;AACJ,iBAAC,CAAC;gBAEF,SAAS,CAAC,MAAM,IAAI,EAAE,WAAW,EAAE,CAAC;AACtC,aAAC,CAAC;AACJ,SAAC,CAAC;;8GA5DO,cAAc,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAd,cAAc,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gDAAA,EAAA,MAAA,EAAA,EAAA,cAAA,EAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,IAAA,EAAA,UAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAAd,cAAc,EAAA,UAAA,EAAA,CAAA;kBAJ1B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,QAAQ,EAAE;AACX,iBAAA;;;MCOY,UAAU,CAAA;AAarB,IAAA,WAAA,GAAA;AAXiB,QAAA,IAAA,CAAA,oBAAoB,GAAyB,MAAM,CAAC,oBAAoB,CAAC;QAEzE,IAAS,CAAA,SAAA,GAAmB,MAAM,CAAC,cAAc,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAElE,QAAA,IAAA,CAAA,IAAI,GAAW,MAAM,CAAC,MAAM,CAAC;AAE9C;;AAEG;AACH,QAAA,IAAA,CAAA,eAAe,GAAqC,MAAM,CAAmB,EAAE,CAAC;AAG9E,QAAA,IAAI,IAAkB;AAEtB,QAAA,MAAM,CAAC,CAAC,SAAkC,KAAI;YAC5C,MAAM,aAAa,GAAgB,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;YACjE,MAAM,qBAAqB,GAAgB,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;YACjF,MAAM,gBAAgB,GAAW,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE;YACpE,MAAM,aAAa,GAAY,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;YAE7D,SAAS,CAAC,MAAK;AACb,gBAAA,IAAI,CAAC,aAAa,IAAI,qBAAqB,IAAI,aAAa,EAAE;;AAE5D,oBAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAK;AAC/B,wBAAA,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,gBAAgB,CAAC,CAAC,IAAI,CACxG,GAAG,CAAC,CAAC,OAA8B,KAAK,mBAAmB,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC,CAC7F,CAAC,SAAS,CAAC,MAAK;AACf,4BAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAK;;gCAEjB,qBAAqB,CAAC,MAAK;AACzB,oCAAA,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC;wCACvB,KAAK,EAAE,qBAAqB,CAAC,WAAW;wCACxC,MAAM,EAAE,qBAAqB,CAAC;AAC/B,qCAAA,CAAC;AACJ,iCAAC,CAAC;AACJ,6BAAC,CAAC;AACJ,yBAAC,CAAC;AACJ,qBAAC,CAAC;;gBAEJ,SAAS,CAAC,MAAM,IAAI,EAAE,WAAW,EAAE,CAAC;AACtC,aAAC,CAAC;AACJ,SAAC,CAAC;;8GA3CO,UAAU,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;kGAAV,UAAU,EAAA,YAAA,EAAA,IAAA,EAAA,QAAA,EAAA,4CAAA,EAAA,IAAA,EAAA,EAAA,UAAA,EAAA,EAAA,sBAAA,EAAA,yBAAA,EAAA,uBAAA,EAAA,0BAAA,EAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;;2FAAV,UAAU,EAAA,UAAA,EAAA,CAAA;kBARtB,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACT,oBAAA,UAAU,EAAE,IAAI;AAChB,oBAAA,QAAQ,EAAE,4CAA4C;AACtD,oBAAA,IAAI,EAAE;AACJ,wBAAA,wBAAwB,EAAE,yBAAyB;AACnD,wBAAA,yBAAyB,EAAE;AAC5B;AACF,iBAAA;;;MCEY,iBAAiB,CAAA;8GAAjB,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAjB,IAAA,SAAA,IAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,iBAAiB,YAd1B,WAAW;YACX,cAAc;YACd,cAAc;YACd,cAAc;AACd,YAAA,UAAU,aAGV,WAAW;YACX,cAAc;YACd,cAAc;YACd,cAAc;YACd,UAAU,CAAA,EAAA,CAAA,CAAA;+GAGD,iBAAiB,EAAA,CAAA,CAAA;;2FAAjB,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAhB7B,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,OAAO,EAAE;wBACP,WAAW;wBACX,cAAc;wBACd,cAAc;wBACd,cAAc;wBACd;AACD,qBAAA;AACD,oBAAA,OAAO,EAAE;wBACP,WAAW;wBACX,cAAc;wBACd,cAAc;wBACd,cAAc;wBACd;AACD;AACF,iBAAA;;AAIK,SAAU,uBAAuB,CAAC,OAA2B,EAAA;IACjE,OAAO;AACL,QAAA;AACE,YAAA,OAAO,EAAE,oBAAoB;AAC7B,YAAA,QAAQ,EAAE,EAAE,GAAG,cAAc,EAAE,GAAG,OAAO;AAC1C;KACF;AACH;AAEM,SAAU,wBAAwB,CAAC,GAAW,EAAA;AAClD,IAAA,OAAO,wBAAwB,CAAC;AAC9B,QAAA;AACE,YAAA,OAAO,EAAE,qBAAqB;AAC9B,YAAA,QAAQ,EAAE;AACX;AACF,KAAA,CAAC;AACJ;;AC5CA;;AAEG;;;;"}